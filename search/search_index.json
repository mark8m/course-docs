{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CMPUT 401 In this course, we review all phases of software development from a process perspective. The course introduces some of the best practices in software product and project management and the architectural and technological impacts on management. Group projects require specification and initial design or redesign of a software system.","title":"Course Description"},{"location":"#cmput-401","text":"In this course, we review all phases of software development from a process perspective. The course introduces some of the best practices in software product and project management and the architectural and technological impacts on management. Group projects require specification and initial design or redesign of a software system.","title":"CMPUT 401"},{"location":"course-outline/","text":"University of Alberta CMPUT 401 - Software Process and Product Management LEC-B1 Winter 2024 eClass Page : https://eclass.srv.ualberta.ca/course/view.php?id=95431 Lecture In-person Fridays , 9:00AM to 10:50AM, CSC B-10 Labs/Seminars In-person Wednesdays , 9:00AM to 10:50AM, CSC B-10 Some Mondays , 9:00AM to 10:50AM Monday, January 15th, CSC B-10 Monday, March 11th, CSC B-10 Sunday , Jan 21 12:00PM to 3:00PM, ETLC 1-007 Hackathon Friday evening, Jan 19th, 5:00PM - 9:00PM, ETLC 1-007 Saturday , January 20th, 9:00AM - 6:00PM, ETLC 1-007 Presentations and Demo Fair Wednesday , Apr 10th 9:00AM - 10:50AM, CSC B-10 Friday , Apr 12th 9:00AM - 10:50AM, CSC B-10 Instructor Dr. Mark Polak Email : mpolak1@ualberta.ca Office : CAB 3-05 Office hours (CAB 3-05): Before class or after class by appointment Office hours (Zoom): (email to make an appointment) Course Content Course Description : All phases of software development are reviewed from a process perspective. Best practices in software project and product development and management are introduced. Architectural and technological impacts on management. Group projects require specification and initial design or redesign of a software system. Prerequisites: CMPUT 301. Objectives and Learning Outcomes: This course aims to provide students with an authentic experience of working with a client as a team member. Some clients are non-profit organizations or Universities, while others are startup companies. We are partnering with the Community Service-Learning Office to create opportunities for you to work on projects identified by community-based organizations as serving their needs. In the process, you will have to apply your knowledge on analyzing requirements, designing, developing, documenting, and testing software, and develop new technical skills working with new programming languages and tools. You will also acquire new knowledge on how to work with others, how to interact with clients to elicit their needs and explain how the delivered software meets these needs, how to negotiate task sharing and manage one\u2019s tasks, how to plan and how to mitigate risks. Course Schedule and Assigned Readings: The weekly topic schedule is likely to be updated during the term; in general terms, the topics to be covered are: Personality and Teamwork Software Product Management Software Requirements Software Development Process Software Architecture Estimation and Planning Project Management User-Interaction Design Testing Measurement Learning Resources Textbook : There is no required textbook for this course. Each module will cite online resources as required readings. You will find the links to each topic on the course eClass page. Recommended or Optional Learning Resources : Additional resources may be provided by links from this site or the course eClass page. Course Fees : No fees are anticipated. Every effort has been made to provide access to online services needed for free. However, since every course project is unique, an unanticipated online service that requires a paid subscription may be needed. Academic Success Centre The Academic Success Centre provides professional academic support to help students strengthen their academic skills and achieve their academic goals. Individual advising, appointments, and group workshops are available year round in the areas of Accessibility, Communication, Learning, and Writing Resources. Modest fees apply for some services. Grade Evaluation Team Project (70% total) Your team will deliver the project through an evolutionary process in five sprints. All project deliverables will be submitted through the project repository and must be available for inspection by the TAs by 8 pm two days before the sprint demo (for example, if your sprint demo is on Monday, you must submit a release on Saturday, no later than 8 pm). Make sure that your release is on GitHub before 8 pm, there will be a penalty for late submissions (the late submission policy is outlined in the Sprint Rubrics document). The team is marked as a whole (left section in the table below), i.e. each team member receives equal marks. We may retroactively update your sprint marks based on your contribution factor . It means that your sprint scores may get either higher or lower. The coefficients depend on: How your team feels about your contribution to the project (based on the peer feedback forms). The instructor and TA's assessment of your individual contribution. We will review your contribution and apply individual coefficients twice during the term: After Sprint 3 (individual coefficients will be applied to Sprints 1, 2, and 3), After the end of the project (individual coefficients will be applied to Sprints 4 and 5). Team Project Grade Structure The team is marked as a whole, individual coefficients may be applied based on individual contribution. Component Weight Sprint 1 12% Sprint 2 12% Sprint 3 12% Sprint 4 12% Sprint 5 12% Screencast 3% Presentation 3% Final assessment by client 4% Total 70% Individual Work (30% total) Besides the final exam, your individual work component involves: One assignment (due date per class schedule) Reflection forms (four peer-review forms (one after each Sprint) and a final reflection), due by the end of each Sprint demo day (5) and by the end of the class (1) In-class and hackathon participation Component Weight Assignment 5% Reflection forms 3% Participation 7% Final exam 15% Total 30% Students must verify the Final Exam date on BearTracks when the Final Exam Schedule is posted. Grades are unofficial until approved by the Department and/or Faculty offering the course. Participation Students are expected to attend and participate in all classes and labs. Each class may include one or more individual or group exercises. Each lab usually includes a stand-up meeting and may also include other individual or group activities. Missed participation work will not be excused. Letter Grades There is no fixed formula for translating your composite marks into a final grade. The final letter grade will be assigned based on how your course percentage represents mastery of the course material according to the University of Alberta grading system guidelines. The guidelines state that \"Grades reflect judgements of student achievement made by instructors and must correspond to the associated descriptor. These judgements are based on a combination of absolute achievement and relative performance in a class. \" This quote and further information about the grading system including the descriptors can be found in the University Calendar . The CS Department policies about grading also apply. How many % do I need in the course to get an A? To get a B? To get a C? We do not use pre-defined percentages of your final mark to compute your final grade, but instead use our judgement of how your final percentage indicates the level of mastery in the table above for an A, B, C, D+. This is done at the end of the semester. A 50% or better final grade usually earns at least a D. This is the standard system in use by most Computing Science courses at the University of Alberta. However, it may not be what you are used to from other institutions. The department of Computing Science believes this produces a fair evaluation and our extensive experience supports this. Letter Descriptor Interpretation A Excellent Consistently original thinking that extends the material, demonstrated depth and breadth in the material, ability to integrate material with other subjects, ability to analyze and synthesize material at various levels of abstraction. B Good Like an A, but not consistent over time, or weak in a specific area. C Satisfactory Understand the core material but not its subtleties, can apply it to simple situations on own and to more complex situations with hints, evidence that the material has changed the way of thinking. D+ Poor Understand some of the core material but not its subtleties, can apply it to simple situations but often needs assistance, evidence that the material has had some change on the way of thinking. D Minimal Pass Shows some understanding of parts of the material, cannot apply it without some direction, little evidence that the material has changed the way of thinking F Failure Little evidence of understanding of even the surface issues, poor analysis and synthesis, inability to apply the material. At the end of the semester, the minimum overall percentage demonstrates \"Excellent\" in the table above will be the minimum percentage for an A-. The minimum overall percentage demonstrates \"Good\" will be the minimum percentage for a B-. The minimum overall percentage demonstrates \"Satisfactory\" will be the minimum percentage for a C-. The minimum overall percentage demonstrates \"Poor\" will be the minimum percentage for a D. Anything over 50% is usually at least a D, sometimes it is higher than a D. Every semester contains different material, since every semester we try to improve the course, and we also need to constantly create new questions and assignments to mitigate cheating. Thus, the breakpoints change from semester to semester. However, these changes do not depend on the class average, they depend on the percentage that demonstrates different levels in the table above! For more information, see the \"Percentages and Letter Grades\" document on eClass. Statement of Expectations for AI Use You MUST not submit work by Chat GPT as your own, that is plagiarism. This also applies to other \"AI\" and Generative Models: Lex.page, DALL-E2, Google BARD, Microsoft Bing, and others. If you use ChatGPT you must cite it. This includes the Entity, Resource, Subject, and Date. For example: // The following function from Microsoft, Bing, \"How do I write a merge sort in JavaScript?\", 2023-08-31 function mergeSort(array) { If you use ChatGPT you must cite it , but it's probably better to Google what it tells you and find a real citation because: ChatGPT is wrong a lot. It does not understand computer science. It understands how to form sentences and paragraphs well enough to be convincing, but it doesn't actually understand what anything it is saying means. When it has the choice between two sentences, with opposite meanings, it will pick the sentence that looks more like English it has seen, it does not pick the one that is most correct. This means you need to double-check that what it tells you is actually correct. Stackoverflow is always a better resource than Large Language Models such as ChatGPT , but of course if you use code from Stackoverflow or any other website, you must cite it. ChatGPT and similar services are recording everything you tell it, and tracking you. Using ChatGPT/Bing/Bard etc. they are recording everything you say and how the LLM responds to you. There is no privacy. ChatGPT example from CMPUT 229: Me: \"What is the difference between the b and j pseudoinstruction in RISC-V?\" ChatGPT: \"... The b instruction is actually a shorthand for the more general beq (branch if equal) instruction, which compares two registers and branches if they are equal. However, > > in the case of b, one of the registers is always x0 (the zero register), so the comparison > is always false, effectively causing an unconditional jump. ...the key difference between b > and j is that b is a relative branch instruction that jumps to a location within a limited range, while j is an absolute jump instruction that can jump to any address within the range of the program counter.\" There are 3 problems with this answer: b is not shorthand for beq: RARS replaces it with jal -- the actual replacement depends on the assembler used and the situation it is used in. This also makes ChatGPT's conclusion about relative limited range jumps and absolute jumps wrong. All jumps and branches in RISC-V are relative, short range jumps except jalr. RARS also (at least in every case I've seen) translates j to jal, not jalr, and jal is also a short-range, relative jump. If b gets translated to beq x0, Y, label then what guarantees that the other register isn't also zero? The comparison with beq x0, Y cannot always be false, despite what ChatGPT claimed. This really doesn't make any sense. It would make more sense for it to be translated to bne x0, x0, label ... but that's the opposite instruction of what ChatGPT claimed. Re-Evaluation of Term Work Re-Evaluation of Term Work follows the Computing Science department course policies . Any questions or concerns about marks on a particular assignment must be brought to the attention of the instructor (not a TA) within 10 days of its return date. After that, we will not consider remarking or re-evaluating the work. So do not expect anyone to re-evaluate all the work you did all term long in the hopes of getting a higher final grade. However, clerical errors such as incorrectly computing or recording a mark may be raised at any time prior to 2 working days following the final exam. It is the student's responsibility to confirm that their term work has been recorded properly. Re-examination There is no possibility of a re-examination in this course. Past or Representative evaluative Material Will be posted on eClass. Policies for Late and Missed Work Late Policy : Absolutely no late work will be accepted. Missed Term Work or Final Exam Due to Non-medical Protected Grounds (e.g., religious beliefs): When a term assessment or final exam presents a conflict based on non-medical protected grounds , students must apply to the Academic Success Centre for accommodations via their Register for Accommodations website. Students can review their eligibility and choose the application process specific for Accommodations Based on Non-medical Protected Grounds . It is imperative that students review the dates of all course assessments upon receipt of the course outline, and apply AS SOON AS POSSIBLE to ensure the timely application of the accommodation. Students who apply later in the term may experience unavoidable delays in the processing of the application, which can affect the accommodation. Missed Term Work : A student who cannot complete a course component (except the final exam, see the next section) due to incapacitating illness, severe domestic affliction or other compelling reasons must contact the instructor within two working days of missing the assessment, or as soon as possible, to request an excused absence. If an excused absence is granted, then weight will be transferred to other course components. An excused absence is a privilege and not a right. There is no guarantee that an absence will be excused. Misrepresentation of facts to gain an excused absence is a serious breach of the Code of Student Behaviour. In all cases, instructors may request adequate documentation to substantiate the reason for the absence at their discretion. Deferred Final Examination : A student who cannot write the final examination due to incapacitating illness, severe domestic affliction or other compelling reasons can apply for a deferred final examination. Such an application must be made to the student\u2019s Faculty office within two working days of the missed examination and must be supported by appropriate documentation or a Statutory Declaration (see calendar on Attendance ). Deferred examinations are a privilege and not a right; there is no guarantee that a deferred examination will be granted. The Faculty may deny deferral requests in cases where less than 50% of term work has been completed. Misrepresentation of facts to gain a deferred examination is a serious breach of the Code of Student Behaviour. Remote Delivery Considerations Unless otherwise instructed by an instructor, this course requires attendance in-person. Student Responsibilities Academic Integrity and Student Conduct : The University of Alberta is committed to the highest standards of academic integrity and honesty, as well as maintaining a learning environment that fosters the safety, security, and the inherent dignity of each member of the community, ensuring students conduct themselves accordingly. Students are expected to be familiar with the standards of academic honesty and appropriate student conduct, and to uphold the policies of the University in this respect. Students are particularly urged to familiarize themselves with the provisions of the Code of Student Behaviour and the Student Conduct Policy , and avoid any behaviour that could potentially result in suspicions of academic misconduct (e.g., cheating, plagiarism, misrepresentation of facts) and non-academic misconduct (e.g., discrimination, harassment, physical assault). Academic and non-academic misconduct are taken very seriously and can result in suspension or expulsion from the University. All students are expected to consult the Academic Integrity website for clarification on the various academic offences. All forms of academic dishonesty are unacceptable at the University. Any suspected academic offence in this course will be reported to the College of Natural and Applied Sciences. Suspected cases of non-academic misconduct will be reported to the Dean of Students. The College, the Faculty of Science, and the Dean of Students are committed to student rights and responsibilities, and adhere to due process and administrative fairness, as outlined in the Code of Student Behaviour and the Student Conduct Policy. Anyone who is found in violation is likely to receive a sanction. Typical sanctions for academic misconduct include conduct probation, a mark reduction or a mark of 0 on an assessment, a grade reduction or a grade of F in a course, a remark on the transcript, and a recommendation for suspension or expulsion. Sanctions for non-academic misconduct include conduct conditions, fines, suspension of essential or non-essential University services and resources, and suspension or expulsion from the University. Appropriate Collaboration: Exams Exams are confidential. No discussion of the contents of the exam is permitted except with instructors. Appropriate Collaboration: Assignments Students are not permitted to copy solutions on homework assignments. Here are some tips to avoid copying on assignments: Do not write down something that you cannot explain to your instructor. When you are helping other students, avoid showing them your work directly. Instead, explain your solution verbally. Students whose work is copied also receive academic sanctions. If you find yourself reading another student's solution, do not write anything down. Once you understand how to solve the problem, remove the other person's work from your sight and then write up the solution to the question yourself. Looking back and forth between someone else's paper and your own paper is almost certainly copying and will result in academic sanctions for both you and your fellow student. If the instructor or TA writes down part of a solution in order to help explain it to you or the class, you cannot copy it and hand it in for credit. Treat it the same way you would treat another student's work with respect to copying, that is, remove the explanation from your sight and then write up the solution yourself. There is often more than one way to solve a problem. Choose the method that makes the most sense to you rather than the method that other students happen to use. If none of the ideas in your solution are your own, there is a good chance it will be flagged as copying. Appropriate Collaboration: Group Projects As long as you are a part of a group, you are responsible for everything in the group project, whether or not you participated in every component. More information about appropriate collaboration. Exam Conduct : Your student photo I.D. is required at exams to verify your identity. Students will not be allowed to begin an examination after it has been in progress for 30 minutes. Students must remain in the exam room until at least 30 minutes has elapsed. All electronic devices must be turned off and stored in your bags. The only permitted electronics are those being used for accessibility or accomodations. Cell Phones : Cell phones are to be turned off during lectures, labs and seminars. Students Eligible for Accessibility-Related Accommodations In accordance with the University of Alberta\u2019s Discrimination, Harassment, and Duty to Accommodate policy, accommodation support is available to eligible students who encounter limitations or restrictions to their ability to perform the daily activities necessary to pursue studies at a post-secondary level due to medical conditions and/or non-medical protected grounds. Accommodations are coordinated through the Academic Success Centre , and students can learn more about eligibility on the Register for Accommodations website . It is recommended that students apply as early as possible in order to ensure sufficient time to complete accommodation registration and coordination. Students are advised to review and adhere to published deadlines for accommodation approval and for specific accommodation requests (e.g., exam registration submission deadlines). Students who request accommodations less than a month in advance of the academic term for which they require accommodations may experience unavoidable delays or consequences in their academic programs, and may need to consider alternative academic schedules. Recording and/or Distribution of Course Materials Audio or video recording, digital or otherwise, of lectures, labs, seminars or any other teaching environment by students is allowed only with the prior written consent of the instructor or as a part of an approved accommodation plan. Student or instructor content, digital or otherwise, created and/or used within the context of the course is to be used solely for personal study, and is not to be used or distributed for any other purpose without prior written consent from the content author(s). Learning and Working Environment The Faculty of Science is committed to ensuring that all students, faculty and staff are able to work and study in an environment that is safe and free from discrimination, harassment, and violence of any kind. It does not tolerate behaviour that undermines that environment. This includes virtual environments and platforms. If you are experiencing harassment, discrimination, fraud, theft or any other issue and would like to get confidential advice, please contact any of these campus services: Office of Safe Disclosure & Human Rights : A safe, neutral and confidential space to disclose concerns about how the University of Alberta policies, procedures or ethical standards are being applied. They provide strategic advice and referral on matters such as discrimination, harassment, duty to accommodate and wrong-doings. Disclosures can be made in person or online using the Online Reporting Tool . University of Alberta Protective Services : Peace officers dedicated to ensuring the safety and security of U of A campuses and community. Staff or students can contact UAPS to make a report if they feel unsafe, threatened, or targeted on campus or by another member of the university community. Office of the Student Ombuds : A confidential and free service that strives to ensure that university processes related to students operate as fairly as possible. They offer information, advice, and support to students, faculty, and staff as they deal with academic, discipline, interpersonal, and financial issues related to student programs. Office of the Dean of Students : They can assist students in navigating services to ensure they receive appropriate and timely resources. For students who are unsure of the support they may need, are concerned about how to access services on campus, or feel like they may need interim support while you wait to access a service, the Dean of Students office is here to help. Feeling Stressed, Anxious, or Upset? It's normal for us to have different mental health experiences throughout the year. Know that there are people who want to help. You can reach out to your friends and access a variety of supports available on and off campus at the Need Help Now webpage or by calling the 24-hour Distress Line: 780-482-4357 (HELP). Student Self-Care Guide : This Self-Care Guide , originally designed by the Faculty of Native Studies, has broader application for use during students\u2019 learning. It provides some ideas and strategies to consider that can help navigate emotionally challenging or triggering material. Additional Information Policy about course outlines can be found in Course Requirements, Evaluations Procedures and Grading of the University Calendar. Land Acknowledgement : The University of Alberta respectfully acknowledges that we are situated on Treaty 6 territory, traditional lands of First Nations and M\u00e9tis people. To learn more about the significance of this land acknowledgement, please read this useful article and associated links to more information. Disclaimer : Any typographical errors in this Course Outline are subject to change and will be announced in class. The date of the final examination is set by the Registrar and takes precedence over the final examination date reported in this syllabus. Copyright : Dr. Hazel Campbell, Department of Computing Science, Faculty of Science, University of Alberta (2023). Dr. Mark Polak, Department of Computing Science, Faculty of Science, University of Alberta (2023). Dr. Ildar Akhmetov, Department of Computing Science, Faculty of Science, University of Alberta (2023). Update History 2023-08-31 - Draft 2023-09-01 - Draft 2023-09-05 - Exam collaboration policy, add meeting dates and times. 2023-09-07 - Room numbers and office hours update 2023-09-20 - Added location of where meeting minutes should be placed (in /docs folder labeled as meeting-minutes.md ) 2024-01-05 - Edited for Winter 2024 term 2024-02-02 - Specified where scrum roles should be, removed Belbin role links","title":"Course Outline"},{"location":"course-outline/#university-of-alberta-cmput-401-software-process-and-product-management-lec-b1-winter-2024","text":"eClass Page : https://eclass.srv.ualberta.ca/course/view.php?id=95431","title":"University of Alberta  CMPUT 401 - Software Process and Product Management  LEC-B1  Winter 2024"},{"location":"course-outline/#lecture","text":"In-person Fridays , 9:00AM to 10:50AM, CSC B-10","title":"Lecture"},{"location":"course-outline/#labsseminars","text":"In-person Wednesdays , 9:00AM to 10:50AM, CSC B-10 Some Mondays , 9:00AM to 10:50AM Monday, January 15th, CSC B-10 Monday, March 11th, CSC B-10 Sunday , Jan 21 12:00PM to 3:00PM, ETLC 1-007","title":"Labs/Seminars"},{"location":"course-outline/#hackathon","text":"Friday evening, Jan 19th, 5:00PM - 9:00PM, ETLC 1-007 Saturday , January 20th, 9:00AM - 6:00PM, ETLC 1-007","title":"Hackathon"},{"location":"course-outline/#presentations-and-demo-fair","text":"Wednesday , Apr 10th 9:00AM - 10:50AM, CSC B-10 Friday , Apr 12th 9:00AM - 10:50AM, CSC B-10","title":"Presentations and Demo Fair"},{"location":"course-outline/#instructor","text":"Dr. Mark Polak Email : mpolak1@ualberta.ca Office : CAB 3-05 Office hours (CAB 3-05): Before class or after class by appointment Office hours (Zoom): (email to make an appointment)","title":"Instructor"},{"location":"course-outline/#course-content","text":"Course Description : All phases of software development are reviewed from a process perspective. Best practices in software project and product development and management are introduced. Architectural and technological impacts on management. Group projects require specification and initial design or redesign of a software system. Prerequisites: CMPUT 301. Objectives and Learning Outcomes: This course aims to provide students with an authentic experience of working with a client as a team member. Some clients are non-profit organizations or Universities, while others are startup companies. We are partnering with the Community Service-Learning Office to create opportunities for you to work on projects identified by community-based organizations as serving their needs. In the process, you will have to apply your knowledge on analyzing requirements, designing, developing, documenting, and testing software, and develop new technical skills working with new programming languages and tools. You will also acquire new knowledge on how to work with others, how to interact with clients to elicit their needs and explain how the delivered software meets these needs, how to negotiate task sharing and manage one\u2019s tasks, how to plan and how to mitigate risks. Course Schedule and Assigned Readings: The weekly topic schedule is likely to be updated during the term; in general terms, the topics to be covered are: Personality and Teamwork Software Product Management Software Requirements Software Development Process Software Architecture Estimation and Planning Project Management User-Interaction Design Testing Measurement","title":"Course Content"},{"location":"course-outline/#learning-resources","text":"Textbook : There is no required textbook for this course. Each module will cite online resources as required readings. You will find the links to each topic on the course eClass page. Recommended or Optional Learning Resources : Additional resources may be provided by links from this site or the course eClass page. Course Fees : No fees are anticipated. Every effort has been made to provide access to online services needed for free. However, since every course project is unique, an unanticipated online service that requires a paid subscription may be needed.","title":"Learning Resources"},{"location":"course-outline/#academic-success-centre","text":"The Academic Success Centre provides professional academic support to help students strengthen their academic skills and achieve their academic goals. Individual advising, appointments, and group workshops are available year round in the areas of Accessibility, Communication, Learning, and Writing Resources. Modest fees apply for some services.","title":"Academic Success Centre"},{"location":"course-outline/#grade-evaluation","text":"","title":"Grade Evaluation"},{"location":"course-outline/#team-project-70-total","text":"Your team will deliver the project through an evolutionary process in five sprints. All project deliverables will be submitted through the project repository and must be available for inspection by the TAs by 8 pm two days before the sprint demo (for example, if your sprint demo is on Monday, you must submit a release on Saturday, no later than 8 pm). Make sure that your release is on GitHub before 8 pm, there will be a penalty for late submissions (the late submission policy is outlined in the Sprint Rubrics document). The team is marked as a whole (left section in the table below), i.e. each team member receives equal marks. We may retroactively update your sprint marks based on your contribution factor . It means that your sprint scores may get either higher or lower. The coefficients depend on: How your team feels about your contribution to the project (based on the peer feedback forms). The instructor and TA's assessment of your individual contribution. We will review your contribution and apply individual coefficients twice during the term: After Sprint 3 (individual coefficients will be applied to Sprints 1, 2, and 3), After the end of the project (individual coefficients will be applied to Sprints 4 and 5).","title":"Team Project (70% total)"},{"location":"course-outline/#team-project-grade-structure","text":"The team is marked as a whole, individual coefficients may be applied based on individual contribution. Component Weight Sprint 1 12% Sprint 2 12% Sprint 3 12% Sprint 4 12% Sprint 5 12% Screencast 3% Presentation 3% Final assessment by client 4% Total 70%","title":"Team Project Grade Structure"},{"location":"course-outline/#individual-work-30-total","text":"Besides the final exam, your individual work component involves: One assignment (due date per class schedule) Reflection forms (four peer-review forms (one after each Sprint) and a final reflection), due by the end of each Sprint demo day (5) and by the end of the class (1) In-class and hackathon participation Component Weight Assignment 5% Reflection forms 3% Participation 7% Final exam 15% Total 30% Students must verify the Final Exam date on BearTracks when the Final Exam Schedule is posted. Grades are unofficial until approved by the Department and/or Faculty offering the course.","title":"Individual Work (30% total)"},{"location":"course-outline/#participation","text":"Students are expected to attend and participate in all classes and labs. Each class may include one or more individual or group exercises. Each lab usually includes a stand-up meeting and may also include other individual or group activities. Missed participation work will not be excused.","title":"Participation"},{"location":"course-outline/#letter-grades","text":"There is no fixed formula for translating your composite marks into a final grade. The final letter grade will be assigned based on how your course percentage represents mastery of the course material according to the University of Alberta grading system guidelines. The guidelines state that \"Grades reflect judgements of student achievement made by instructors and must correspond to the associated descriptor. These judgements are based on a combination of absolute achievement and relative performance in a class. \" This quote and further information about the grading system including the descriptors can be found in the University Calendar . The CS Department policies about grading also apply. How many % do I need in the course to get an A? To get a B? To get a C? We do not use pre-defined percentages of your final mark to compute your final grade, but instead use our judgement of how your final percentage indicates the level of mastery in the table above for an A, B, C, D+. This is done at the end of the semester. A 50% or better final grade usually earns at least a D. This is the standard system in use by most Computing Science courses at the University of Alberta. However, it may not be what you are used to from other institutions. The department of Computing Science believes this produces a fair evaluation and our extensive experience supports this. Letter Descriptor Interpretation A Excellent Consistently original thinking that extends the material, demonstrated depth and breadth in the material, ability to integrate material with other subjects, ability to analyze and synthesize material at various levels of abstraction. B Good Like an A, but not consistent over time, or weak in a specific area. C Satisfactory Understand the core material but not its subtleties, can apply it to simple situations on own and to more complex situations with hints, evidence that the material has changed the way of thinking. D+ Poor Understand some of the core material but not its subtleties, can apply it to simple situations but often needs assistance, evidence that the material has had some change on the way of thinking. D Minimal Pass Shows some understanding of parts of the material, cannot apply it without some direction, little evidence that the material has changed the way of thinking F Failure Little evidence of understanding of even the surface issues, poor analysis and synthesis, inability to apply the material. At the end of the semester, the minimum overall percentage demonstrates \"Excellent\" in the table above will be the minimum percentage for an A-. The minimum overall percentage demonstrates \"Good\" will be the minimum percentage for a B-. The minimum overall percentage demonstrates \"Satisfactory\" will be the minimum percentage for a C-. The minimum overall percentage demonstrates \"Poor\" will be the minimum percentage for a D. Anything over 50% is usually at least a D, sometimes it is higher than a D. Every semester contains different material, since every semester we try to improve the course, and we also need to constantly create new questions and assignments to mitigate cheating. Thus, the breakpoints change from semester to semester. However, these changes do not depend on the class average, they depend on the percentage that demonstrates different levels in the table above! For more information, see the \"Percentages and Letter Grades\" document on eClass.","title":"Letter Grades"},{"location":"course-outline/#statement-of-expectations-for-ai-use","text":"You MUST not submit work by Chat GPT as your own, that is plagiarism. This also applies to other \"AI\" and Generative Models: Lex.page, DALL-E2, Google BARD, Microsoft Bing, and others. If you use ChatGPT you must cite it. This includes the Entity, Resource, Subject, and Date. For example: // The following function from Microsoft, Bing, \"How do I write a merge sort in JavaScript?\", 2023-08-31 function mergeSort(array) { If you use ChatGPT you must cite it , but it's probably better to Google what it tells you and find a real citation because: ChatGPT is wrong a lot. It does not understand computer science. It understands how to form sentences and paragraphs well enough to be convincing, but it doesn't actually understand what anything it is saying means. When it has the choice between two sentences, with opposite meanings, it will pick the sentence that looks more like English it has seen, it does not pick the one that is most correct. This means you need to double-check that what it tells you is actually correct. Stackoverflow is always a better resource than Large Language Models such as ChatGPT , but of course if you use code from Stackoverflow or any other website, you must cite it. ChatGPT and similar services are recording everything you tell it, and tracking you. Using ChatGPT/Bing/Bard etc. they are recording everything you say and how the LLM responds to you. There is no privacy. ChatGPT example from CMPUT 229: Me: \"What is the difference between the b and j pseudoinstruction in RISC-V?\" ChatGPT: \"... The b instruction is actually a shorthand for the more general beq (branch if equal) instruction, which compares two registers and branches if they are equal. However, > > in the case of b, one of the registers is always x0 (the zero register), so the comparison > is always false, effectively causing an unconditional jump. ...the key difference between b > and j is that b is a relative branch instruction that jumps to a location within a limited range, while j is an absolute jump instruction that can jump to any address within the range of the program counter.\" There are 3 problems with this answer: b is not shorthand for beq: RARS replaces it with jal -- the actual replacement depends on the assembler used and the situation it is used in. This also makes ChatGPT's conclusion about relative limited range jumps and absolute jumps wrong. All jumps and branches in RISC-V are relative, short range jumps except jalr. RARS also (at least in every case I've seen) translates j to jal, not jalr, and jal is also a short-range, relative jump. If b gets translated to beq x0, Y, label then what guarantees that the other register isn't also zero? The comparison with beq x0, Y cannot always be false, despite what ChatGPT claimed. This really doesn't make any sense. It would make more sense for it to be translated to bne x0, x0, label ... but that's the opposite instruction of what ChatGPT claimed.","title":"Statement of Expectations for AI Use"},{"location":"course-outline/#re-evaluation-of-term-work","text":"Re-Evaluation of Term Work follows the Computing Science department course policies . Any questions or concerns about marks on a particular assignment must be brought to the attention of the instructor (not a TA) within 10 days of its return date. After that, we will not consider remarking or re-evaluating the work. So do not expect anyone to re-evaluate all the work you did all term long in the hopes of getting a higher final grade. However, clerical errors such as incorrectly computing or recording a mark may be raised at any time prior to 2 working days following the final exam. It is the student's responsibility to confirm that their term work has been recorded properly.","title":"Re-Evaluation of Term Work"},{"location":"course-outline/#re-examination","text":"There is no possibility of a re-examination in this course.","title":"Re-examination"},{"location":"course-outline/#past-or-representative-evaluative-material","text":"Will be posted on eClass.","title":"Past or Representative evaluative Material"},{"location":"course-outline/#policies-for-late-and-missed-work","text":"Late Policy : Absolutely no late work will be accepted. Missed Term Work or Final Exam Due to Non-medical Protected Grounds (e.g., religious beliefs): When a term assessment or final exam presents a conflict based on non-medical protected grounds , students must apply to the Academic Success Centre for accommodations via their Register for Accommodations website. Students can review their eligibility and choose the application process specific for Accommodations Based on Non-medical Protected Grounds . It is imperative that students review the dates of all course assessments upon receipt of the course outline, and apply AS SOON AS POSSIBLE to ensure the timely application of the accommodation. Students who apply later in the term may experience unavoidable delays in the processing of the application, which can affect the accommodation. Missed Term Work : A student who cannot complete a course component (except the final exam, see the next section) due to incapacitating illness, severe domestic affliction or other compelling reasons must contact the instructor within two working days of missing the assessment, or as soon as possible, to request an excused absence. If an excused absence is granted, then weight will be transferred to other course components. An excused absence is a privilege and not a right. There is no guarantee that an absence will be excused. Misrepresentation of facts to gain an excused absence is a serious breach of the Code of Student Behaviour. In all cases, instructors may request adequate documentation to substantiate the reason for the absence at their discretion. Deferred Final Examination : A student who cannot write the final examination due to incapacitating illness, severe domestic affliction or other compelling reasons can apply for a deferred final examination. Such an application must be made to the student\u2019s Faculty office within two working days of the missed examination and must be supported by appropriate documentation or a Statutory Declaration (see calendar on Attendance ). Deferred examinations are a privilege and not a right; there is no guarantee that a deferred examination will be granted. The Faculty may deny deferral requests in cases where less than 50% of term work has been completed. Misrepresentation of facts to gain a deferred examination is a serious breach of the Code of Student Behaviour.","title":"Policies for Late and Missed Work"},{"location":"course-outline/#remote-delivery-considerations","text":"Unless otherwise instructed by an instructor, this course requires attendance in-person.","title":"Remote Delivery Considerations"},{"location":"course-outline/#student-responsibilities","text":"Academic Integrity and Student Conduct : The University of Alberta is committed to the highest standards of academic integrity and honesty, as well as maintaining a learning environment that fosters the safety, security, and the inherent dignity of each member of the community, ensuring students conduct themselves accordingly. Students are expected to be familiar with the standards of academic honesty and appropriate student conduct, and to uphold the policies of the University in this respect. Students are particularly urged to familiarize themselves with the provisions of the Code of Student Behaviour and the Student Conduct Policy , and avoid any behaviour that could potentially result in suspicions of academic misconduct (e.g., cheating, plagiarism, misrepresentation of facts) and non-academic misconduct (e.g., discrimination, harassment, physical assault). Academic and non-academic misconduct are taken very seriously and can result in suspension or expulsion from the University. All students are expected to consult the Academic Integrity website for clarification on the various academic offences. All forms of academic dishonesty are unacceptable at the University. Any suspected academic offence in this course will be reported to the College of Natural and Applied Sciences. Suspected cases of non-academic misconduct will be reported to the Dean of Students. The College, the Faculty of Science, and the Dean of Students are committed to student rights and responsibilities, and adhere to due process and administrative fairness, as outlined in the Code of Student Behaviour and the Student Conduct Policy. Anyone who is found in violation is likely to receive a sanction. Typical sanctions for academic misconduct include conduct probation, a mark reduction or a mark of 0 on an assessment, a grade reduction or a grade of F in a course, a remark on the transcript, and a recommendation for suspension or expulsion. Sanctions for non-academic misconduct include conduct conditions, fines, suspension of essential or non-essential University services and resources, and suspension or expulsion from the University.","title":"Student Responsibilities"},{"location":"course-outline/#appropriate-collaboration-exams","text":"Exams are confidential. No discussion of the contents of the exam is permitted except with instructors.","title":"Appropriate Collaboration: Exams"},{"location":"course-outline/#appropriate-collaboration-assignments","text":"Students are not permitted to copy solutions on homework assignments. Here are some tips to avoid copying on assignments: Do not write down something that you cannot explain to your instructor. When you are helping other students, avoid showing them your work directly. Instead, explain your solution verbally. Students whose work is copied also receive academic sanctions. If you find yourself reading another student's solution, do not write anything down. Once you understand how to solve the problem, remove the other person's work from your sight and then write up the solution to the question yourself. Looking back and forth between someone else's paper and your own paper is almost certainly copying and will result in academic sanctions for both you and your fellow student. If the instructor or TA writes down part of a solution in order to help explain it to you or the class, you cannot copy it and hand it in for credit. Treat it the same way you would treat another student's work with respect to copying, that is, remove the explanation from your sight and then write up the solution yourself. There is often more than one way to solve a problem. Choose the method that makes the most sense to you rather than the method that other students happen to use. If none of the ideas in your solution are your own, there is a good chance it will be flagged as copying.","title":"Appropriate Collaboration: Assignments"},{"location":"course-outline/#appropriate-collaboration-group-projects","text":"As long as you are a part of a group, you are responsible for everything in the group project, whether or not you participated in every component. More information about appropriate collaboration. Exam Conduct : Your student photo I.D. is required at exams to verify your identity. Students will not be allowed to begin an examination after it has been in progress for 30 minutes. Students must remain in the exam room until at least 30 minutes has elapsed. All electronic devices must be turned off and stored in your bags. The only permitted electronics are those being used for accessibility or accomodations. Cell Phones : Cell phones are to be turned off during lectures, labs and seminars.","title":"Appropriate Collaboration: Group Projects"},{"location":"course-outline/#students-eligible-for-accessibility-related-accommodations","text":"In accordance with the University of Alberta\u2019s Discrimination, Harassment, and Duty to Accommodate policy, accommodation support is available to eligible students who encounter limitations or restrictions to their ability to perform the daily activities necessary to pursue studies at a post-secondary level due to medical conditions and/or non-medical protected grounds. Accommodations are coordinated through the Academic Success Centre , and students can learn more about eligibility on the Register for Accommodations website . It is recommended that students apply as early as possible in order to ensure sufficient time to complete accommodation registration and coordination. Students are advised to review and adhere to published deadlines for accommodation approval and for specific accommodation requests (e.g., exam registration submission deadlines). Students who request accommodations less than a month in advance of the academic term for which they require accommodations may experience unavoidable delays or consequences in their academic programs, and may need to consider alternative academic schedules.","title":"Students Eligible for Accessibility-Related Accommodations"},{"location":"course-outline/#recording-andor-distribution-of-course-materials","text":"Audio or video recording, digital or otherwise, of lectures, labs, seminars or any other teaching environment by students is allowed only with the prior written consent of the instructor or as a part of an approved accommodation plan. Student or instructor content, digital or otherwise, created and/or used within the context of the course is to be used solely for personal study, and is not to be used or distributed for any other purpose without prior written consent from the content author(s).","title":"Recording and/or Distribution of Course Materials"},{"location":"course-outline/#learning-and-working-environment","text":"The Faculty of Science is committed to ensuring that all students, faculty and staff are able to work and study in an environment that is safe and free from discrimination, harassment, and violence of any kind. It does not tolerate behaviour that undermines that environment. This includes virtual environments and platforms. If you are experiencing harassment, discrimination, fraud, theft or any other issue and would like to get confidential advice, please contact any of these campus services: Office of Safe Disclosure & Human Rights : A safe, neutral and confidential space to disclose concerns about how the University of Alberta policies, procedures or ethical standards are being applied. They provide strategic advice and referral on matters such as discrimination, harassment, duty to accommodate and wrong-doings. Disclosures can be made in person or online using the Online Reporting Tool . University of Alberta Protective Services : Peace officers dedicated to ensuring the safety and security of U of A campuses and community. Staff or students can contact UAPS to make a report if they feel unsafe, threatened, or targeted on campus or by another member of the university community. Office of the Student Ombuds : A confidential and free service that strives to ensure that university processes related to students operate as fairly as possible. They offer information, advice, and support to students, faculty, and staff as they deal with academic, discipline, interpersonal, and financial issues related to student programs. Office of the Dean of Students : They can assist students in navigating services to ensure they receive appropriate and timely resources. For students who are unsure of the support they may need, are concerned about how to access services on campus, or feel like they may need interim support while you wait to access a service, the Dean of Students office is here to help.","title":"Learning and Working Environment"},{"location":"course-outline/#feeling-stressed-anxious-or-upset","text":"It's normal for us to have different mental health experiences throughout the year. Know that there are people who want to help. You can reach out to your friends and access a variety of supports available on and off campus at the Need Help Now webpage or by calling the 24-hour Distress Line: 780-482-4357 (HELP). Student Self-Care Guide : This Self-Care Guide , originally designed by the Faculty of Native Studies, has broader application for use during students\u2019 learning. It provides some ideas and strategies to consider that can help navigate emotionally challenging or triggering material.","title":"Feeling Stressed, Anxious, or Upset?"},{"location":"course-outline/#additional-information","text":"Policy about course outlines can be found in Course Requirements, Evaluations Procedures and Grading of the University Calendar. Land Acknowledgement : The University of Alberta respectfully acknowledges that we are situated on Treaty 6 territory, traditional lands of First Nations and M\u00e9tis people. To learn more about the significance of this land acknowledgement, please read this useful article and associated links to more information. Disclaimer : Any typographical errors in this Course Outline are subject to change and will be announced in class. The date of the final examination is set by the Registrar and takes precedence over the final examination date reported in this syllabus. Copyright : Dr. Hazel Campbell, Department of Computing Science, Faculty of Science, University of Alberta (2023). Dr. Mark Polak, Department of Computing Science, Faculty of Science, University of Alberta (2023). Dr. Ildar Akhmetov, Department of Computing Science, Faculty of Science, University of Alberta (2023).","title":"Additional Information"},{"location":"course-outline/#update-history","text":"2023-08-31 - Draft 2023-09-01 - Draft 2023-09-05 - Exam collaboration policy, add meeting dates and times. 2023-09-07 - Room numbers and office hours update 2023-09-20 - Added location of where meeting minutes should be placed (in /docs folder labeled as meeting-minutes.md ) 2024-01-05 - Edited for Winter 2024 term 2024-02-02 - Specified where scrum roles should be, removed Belbin role links","title":"Update History"},{"location":"course-policies/","text":"Course Policies Team formation policy Goal The goal is to maximize the efficiency of students\u2019 teamwork and, therefore, learning efficiency. To achieve this goal, motivated, balanced, and diverse teams should be formed. Criteria The teams will be formed according to the following criteria: Personal preferences for projects Belbin team roles Career goals diversity Balance of more and less experienced students Starting Fall 2022, team formation is automated. The algorithm will form teams based on the criteria above. Detailed description of the optimization model: Forming CMPUT 401 Teams as a Mixed Integer-Linear Program (developed by Dr. Zachary Friggstad) . Process We will use the following process to form teams: Students fill the Belbin Team Roles Questionnaire that calculates their results - link will be posted on eClass Students fill the Student Experience Form, indicating, among other questions, their assessed team roles, skills and career goals - link will be posted on eClass Students rank the projects based on their personal preferences - link will be posted on eClass Instructor will assign the students into teams, using the criteria above. The best effort to accommodate students\u2019 preferences will be made. However, we can not guarantee that every student will be assigned to the projects of their top choice. Dates Please refer to the live schedule (available on eClass). Dealing with non-cooperative team members policy Recommended steps If a team member refuses to carry their workload on the project, below are suggested steps. Have a constructive conversation with the uncooperative team member (see details below). If the problem persists, the team should notify their TA by email (with the instructor cc-ed). Based on that, a meetings with the team and/or the uncooperative team member will likely be scheduled. Suppose the team member still refuses to contribute. In that case, the team may notify the uncooperative member by email that they are in danger of being fired. A meeting will be scheduled to discuss what might happen next, including the possibility of firing a non-contributing team member. If there is no subsequent improvement, the team should notify the individual by email (copy to the TA and instructor) that they are no longer with the team. Firing could have significant consequences. A fired team member might have an option to work alone on an individual project assignment. An individual project is significantly more challenging than a team project because it requires an individual to independently complete the same deliverables. It should be considered as the last chance, not a free pass. Handling constructive conversations with your teammates We get frustrated about someone not contributing, or we get concerned or anxious about a deadline. It\u2019s to be expected on all projects. Do we just keep that frustration to ourselves and do extra work, not telling that person? Does that frustration come out in other ways? Is it possible that the person is not even aware that s/he is viewed this way? That\u2019s not fair to that person either! We are not protecting someone from bad news. We could actually be contributing to their career downfall. Now\u2019s the time to learn as students, so you don\u2019t have to learn on the job when you have more on the line. Five steps for a constructive conversation: What I notice and observe What is my concern How I interpret it What it means to me What change I would like to see (request SMART actions: Specific, Measurable, Attainable, Realistic, Time-Bound) Example of a constructive conversation You and your non-contributing teammate Steve. You: I see that you are behind with your project tasks. (Step 1) Steve: Yeah, probably I'm a little behind, ... You: I'm concerned about that because our next sprint deadline is pretty soon. (Step 2) Steve: Oh, I see. I\u2019m also really concerned about it! You: Maybe, you've got too much on your plate and are feeling stressed. I just want to check-in. (Step 3) Steve: Yes, I've got so many assignments and readings. I\u2019m very stressed out, ... You: This project is really important for me, and I would like to develop a cool app here. (Step 4) Steve: I understand. I would also like to do a good job with this project, ... You: Please finish the XYZ module until Friday so that our team has enough time to review the code and finalize deployment. (Step 5) Steve: Sure, I'll do it. Make sure to: Assume positive intent Listen non-judgementally Connect to feelings and concerns Reflect honestly on the intentions and needs involved. Based on: Oakley, B., Felder, R., Brent, R., & Elhajj, I. (2004). Turning Student Groups into Effective Teams.","title":"Course Policies"},{"location":"course-policies/#course-policies","text":"","title":"Course Policies"},{"location":"course-policies/#team-formation-policy","text":"","title":"Team formation policy"},{"location":"course-policies/#goal","text":"The goal is to maximize the efficiency of students\u2019 teamwork and, therefore, learning efficiency. To achieve this goal, motivated, balanced, and diverse teams should be formed.","title":"Goal"},{"location":"course-policies/#criteria","text":"The teams will be formed according to the following criteria: Personal preferences for projects Belbin team roles Career goals diversity Balance of more and less experienced students Starting Fall 2022, team formation is automated. The algorithm will form teams based on the criteria above. Detailed description of the optimization model: Forming CMPUT 401 Teams as a Mixed Integer-Linear Program (developed by Dr. Zachary Friggstad) .","title":"Criteria"},{"location":"course-policies/#process","text":"We will use the following process to form teams: Students fill the Belbin Team Roles Questionnaire that calculates their results - link will be posted on eClass Students fill the Student Experience Form, indicating, among other questions, their assessed team roles, skills and career goals - link will be posted on eClass Students rank the projects based on their personal preferences - link will be posted on eClass Instructor will assign the students into teams, using the criteria above. The best effort to accommodate students\u2019 preferences will be made. However, we can not guarantee that every student will be assigned to the projects of their top choice.","title":"Process"},{"location":"course-policies/#dates","text":"Please refer to the live schedule (available on eClass).","title":"Dates"},{"location":"course-policies/#dealing-with-non-cooperative-team-members-policy","text":"","title":"Dealing with non-cooperative team members policy"},{"location":"course-policies/#recommended-steps","text":"If a team member refuses to carry their workload on the project, below are suggested steps. Have a constructive conversation with the uncooperative team member (see details below). If the problem persists, the team should notify their TA by email (with the instructor cc-ed). Based on that, a meetings with the team and/or the uncooperative team member will likely be scheduled. Suppose the team member still refuses to contribute. In that case, the team may notify the uncooperative member by email that they are in danger of being fired. A meeting will be scheduled to discuss what might happen next, including the possibility of firing a non-contributing team member. If there is no subsequent improvement, the team should notify the individual by email (copy to the TA and instructor) that they are no longer with the team. Firing could have significant consequences. A fired team member might have an option to work alone on an individual project assignment. An individual project is significantly more challenging than a team project because it requires an individual to independently complete the same deliverables. It should be considered as the last chance, not a free pass.","title":"Recommended steps"},{"location":"course-policies/#handling-constructive-conversations-with-your-teammates","text":"We get frustrated about someone not contributing, or we get concerned or anxious about a deadline. It\u2019s to be expected on all projects. Do we just keep that frustration to ourselves and do extra work, not telling that person? Does that frustration come out in other ways? Is it possible that the person is not even aware that s/he is viewed this way? That\u2019s not fair to that person either! We are not protecting someone from bad news. We could actually be contributing to their career downfall. Now\u2019s the time to learn as students, so you don\u2019t have to learn on the job when you have more on the line. Five steps for a constructive conversation: What I notice and observe What is my concern How I interpret it What it means to me What change I would like to see (request SMART actions: Specific, Measurable, Attainable, Realistic, Time-Bound)","title":"Handling constructive conversations with your teammates"},{"location":"course-policies/#example-of-a-constructive-conversation","text":"You and your non-contributing teammate Steve. You: I see that you are behind with your project tasks. (Step 1) Steve: Yeah, probably I'm a little behind, ... You: I'm concerned about that because our next sprint deadline is pretty soon. (Step 2) Steve: Oh, I see. I\u2019m also really concerned about it! You: Maybe, you've got too much on your plate and are feeling stressed. I just want to check-in. (Step 3) Steve: Yes, I've got so many assignments and readings. I\u2019m very stressed out, ... You: This project is really important for me, and I would like to develop a cool app here. (Step 4) Steve: I understand. I would also like to do a good job with this project, ... You: Please finish the XYZ module until Friday so that our team has enough time to review the code and finalize deployment. (Step 5) Steve: Sure, I'll do it. Make sure to: Assume positive intent Listen non-judgementally Connect to feelings and concerns Reflect honestly on the intentions and needs involved. Based on: Oakley, B., Felder, R., Brent, R., & Elhajj, I. (2004). Turning Student Groups into Effective Teams.","title":"Example of a constructive conversation"},{"location":"links/","text":"Links CMPUT 401 Projects Portal CMPUT 401 YouTube Channel CMPUT 401 GitHub org Open U of A","title":"Links"},{"location":"links/#links","text":"CMPUT 401 Projects Portal CMPUT 401 YouTube Channel CMPUT 401 GitHub org Open U of A","title":"Links"},{"location":"marking-client-feedback/","text":"Final assessment by client Your client will submit feedback following the completion of your project based on how they feel about the quality of the MVP and the fluidity of collaboration between the team and client. Deliverable Marks Quality of MVP 50 Teamwork 50 Total 100","title":"Client Feedback"},{"location":"marking-client-feedback/#final-assessment-by-client","text":"Your client will submit feedback following the completion of your project based on how they feel about the quality of the MVP and the fluidity of collaboration between the team and client. Deliverable Marks Quality of MVP 50 Teamwork 50 Total 100","title":"Final assessment by client"},{"location":"marking-individual/","text":"Individual Work Assessment Assignment Please refer to the assignment description for details. Reflection forms Each form is marked as all-or-nothing. Deliverable Marks Sprint 1 form 10 Sprint 2 form 10 Sprint 3 form 10 Sprint 4 form 10 Sprint 5 form 10 Final individual reflection form 40 Total 100 Participation Participation is marked as follows: Failure (0): Participate in less than 50% of classes and labs; Unsatisfactory (2): Participate in more than or equal to 50% of classes and labs; Satisfactory (4): Participate in more than 60% of classes and labs; Good (6): Participate in more than 70% of classes and labs; Excellent (7): Participate in more than 85% of classes and labs.","title":"Marking Individual Work"},{"location":"marking-individual/#individual-work-assessment","text":"","title":"Individual Work Assessment"},{"location":"marking-individual/#assignment","text":"Please refer to the assignment description for details.","title":"Assignment"},{"location":"marking-individual/#reflection-forms","text":"Each form is marked as all-or-nothing. Deliverable Marks Sprint 1 form 10 Sprint 2 form 10 Sprint 3 form 10 Sprint 4 form 10 Sprint 5 form 10 Final individual reflection form 40 Total 100","title":"Reflection forms"},{"location":"marking-individual/#participation","text":"Participation is marked as follows: Failure (0): Participate in less than 50% of classes and labs; Unsatisfactory (2): Participate in more than or equal to 50% of classes and labs; Satisfactory (4): Participate in more than 60% of classes and labs; Good (6): Participate in more than 70% of classes and labs; Excellent (7): Participate in more than 85% of classes and labs.","title":"Participation"},{"location":"marking-presentation/","text":"Final Presentation For the final presentation, we will use the PechaKucha format. Two simple rules for a PechaKucha presentation: Exactly 20 slides Each slide is displayed for precisely 20 seconds Total presentation time: 6 min 40 sec. You must use PowerPoint to set up automatic slide advancement ( how to set auto advancement ). Unfortunately, you can\u2019t do it in Google Slides. You need to upload your PowerPoint presentation to a shared Google Drive folder (see the link on eClass). What you might want to talk about Project: client and project background Team: names, photos, roles in the project, accomplishments Experience, ups and downs, what have we learned from this, fun stories about your team Technologies that we have used and learned Final product: the coolest features, UI and UX solutions Feedback from your client and/or users, deployment Useful links How to Give a Great Pecha Kucha Talk PechaKucha about PechaKucha, by Hans Van de Water A Pecha Kucha about Pecha Kucha Creating a Pecha Kucha Presentation Using PowerPoint or Keynote Rubric Deliverable Marks PechaKucha Slideshow 4 Project reflection 4 Organization 4 Presentation visual appeal and creativity 4 Preparation 4 Delivery 4 Teamwork 4 Total 28 PechaKucha Slideshow The presentation has 20 slides The slides automatically advance every 20 seconds Project reflection The presentation provides insights into the project, its development, and the team\u2019s experience Organization The presentation is well organized and easy to follow The material transitions logically from one slide to another Slide numbers are present in the slideshow Visual appeal and creativity The presentation is visually appealing and creative The images are relevant and well chosen Preparation The presentation is well rehearsed and the team members are confident Delivery The presentation is delivered in a clear and confident manner (pacing, tone, volume, eye contact, etc.) Teamwork The presentation is delivered by the whole team","title":"Presentation"},{"location":"marking-presentation/#final-presentation","text":"For the final presentation, we will use the PechaKucha format. Two simple rules for a PechaKucha presentation: Exactly 20 slides Each slide is displayed for precisely 20 seconds Total presentation time: 6 min 40 sec. You must use PowerPoint to set up automatic slide advancement ( how to set auto advancement ). Unfortunately, you can\u2019t do it in Google Slides. You need to upload your PowerPoint presentation to a shared Google Drive folder (see the link on eClass).","title":"Final Presentation"},{"location":"marking-presentation/#what-you-might-want-to-talk-about","text":"Project: client and project background Team: names, photos, roles in the project, accomplishments Experience, ups and downs, what have we learned from this, fun stories about your team Technologies that we have used and learned Final product: the coolest features, UI and UX solutions Feedback from your client and/or users, deployment","title":"What you might want to talk about"},{"location":"marking-presentation/#useful-links","text":"How to Give a Great Pecha Kucha Talk PechaKucha about PechaKucha, by Hans Van de Water A Pecha Kucha about Pecha Kucha Creating a Pecha Kucha Presentation Using PowerPoint or Keynote","title":"Useful links"},{"location":"marking-presentation/#rubric","text":"Deliverable Marks PechaKucha Slideshow 4 Project reflection 4 Organization 4 Presentation visual appeal and creativity 4 Preparation 4 Delivery 4 Teamwork 4 Total 28","title":"Rubric"},{"location":"marking-presentation/#pechakucha-slideshow","text":"The presentation has 20 slides The slides automatically advance every 20 seconds","title":"PechaKucha Slideshow"},{"location":"marking-presentation/#project-reflection","text":"The presentation provides insights into the project, its development, and the team\u2019s experience","title":"Project reflection"},{"location":"marking-presentation/#organization","text":"The presentation is well organized and easy to follow The material transitions logically from one slide to another Slide numbers are present in the slideshow","title":"Organization"},{"location":"marking-presentation/#visual-appeal-and-creativity","text":"The presentation is visually appealing and creative The images are relevant and well chosen","title":"Visual appeal and creativity"},{"location":"marking-presentation/#preparation","text":"The presentation is well rehearsed and the team members are confident","title":"Preparation"},{"location":"marking-presentation/#delivery","text":"The presentation is delivered in a clear and confident manner (pacing, tone, volume, eye contact, etc.)","title":"Delivery"},{"location":"marking-presentation/#teamwork","text":"The presentation is delivered by the whole team","title":"Teamwork"},{"location":"marking-screencast/","text":"Screencast Think about the screencast as a marketing vehicle for your project. Keep it short enough and engaging, be creative. Your goal is to demo your system in the best possible way. It will be posted on the CMPUT 401 portal and YouTube channel , you may use it for your portfolio. Upload your screencast to your Google Drive (preferably, in HD) and post the link in your Github repo. Include in the filename your team name. Rubric Deliverable Marks Product demo 4 Organization 4 Script 4 Visual appeal and creativity 4 Audio quality 4 Total 20 Product demo The screencast shows the product in action and demonstrates its main features The main idea of the product is clearly communicated Organization The screencast is well organized and easy to follow Timing of the screencast is optimal (not too long, not too short) The level of detail is appropriate Script The script is clear and concise There are no spelling or grammar mistakes Script includes voice over and text in the video Visual appeal and creativity The screencast is visually appealing and creative The screencast engages the audience Audio quality The audio quality is good The voice is clear and easy to understand The voice is not a computer generated voice (0 if computer generated) No copyright music is used Possible Deductions Team name is not in the filename No voice over in the video Using computer generated voices Use of copyright music","title":"Screencast"},{"location":"marking-screencast/#screencast","text":"Think about the screencast as a marketing vehicle for your project. Keep it short enough and engaging, be creative. Your goal is to demo your system in the best possible way. It will be posted on the CMPUT 401 portal and YouTube channel , you may use it for your portfolio. Upload your screencast to your Google Drive (preferably, in HD) and post the link in your Github repo. Include in the filename your team name.","title":"Screencast"},{"location":"marking-screencast/#rubric","text":"Deliverable Marks Product demo 4 Organization 4 Script 4 Visual appeal and creativity 4 Audio quality 4 Total 20","title":"Rubric"},{"location":"marking-screencast/#product-demo","text":"The screencast shows the product in action and demonstrates its main features The main idea of the product is clearly communicated","title":"Product demo"},{"location":"marking-screencast/#organization","text":"The screencast is well organized and easy to follow Timing of the screencast is optimal (not too long, not too short) The level of detail is appropriate","title":"Organization"},{"location":"marking-screencast/#script","text":"The script is clear and concise There are no spelling or grammar mistakes Script includes voice over and text in the video","title":"Script"},{"location":"marking-screencast/#visual-appeal-and-creativity","text":"The screencast is visually appealing and creative The screencast engages the audience","title":"Visual appeal and creativity"},{"location":"marking-screencast/#audio-quality","text":"The audio quality is good The voice is clear and easy to understand The voice is not a computer generated voice (0 if computer generated) No copyright music is used","title":"Audio quality"},{"location":"marking-screencast/#possible-deductions","text":"Team name is not in the filename No voice over in the video Using computer generated voices Use of copyright music","title":"Possible Deductions"},{"location":"marking-sprint1/","text":"Team Project Marking: Sprint 1 For the first sprint, you will deliver: Project Requirements document An early version of the Software Design document (focusing on high-level architectural design) Project Management document Teamwork document Note Your documentation must be stored as markdown files in the /docs folder in the main branch of your GitHub repository. Use mkdocs and GitHub Pages to deploy the documentation. Example #1: https://ualberta-cmput401.github.io/example-documentation/ . Example #2: this site you are reading. Note that the examples are just examples and not gold standards for marking. You might also start implementation. Late release submission policy Applies to all sprints. If a sprint release is late for less than 24 hours: penalty of 5 marks. If late for more than 24 hours: penalty at the instuctor's discretion, min. 10 marks. Rubric Deliverable Marks Project overview 10 User stories 20 High-level software design 15 Low-fidelity user interface 15 Sprint planning 15 Teamwork 15 Formatting 5 Wildcard 5 Total 100 Project overview Executive summary is clear, understandable, and concrete Glossary is clear and complete List of similar products is comprehensive, their functionalities are analyzed, with comments on how they may be used for code or inspiration Relevant open source projects are analyzed, with comments on how they may be used for code or inspiration List of useful technical resources is comprehensive User stories Standard notation is used, numbering is consistent, user stories are categorized (e.g. grouped by feature) Complexity of each user story is estimated using story points The set of user stories is complete and relevant, it clearly demonstrates how exactly client requirements will be met Each user story is accompanied by viable acceptance tests User stories are prioritized using the MoSCoW method for the Minimum Viable Product (MVP) in a feasible way High-level software design High-level system architecture is clearly defined Major data elements are clearly defined (using UML Class diagram, or ER diagram) Most important interaction scenarios are clearly defined (using UML Sequence diagrams) Detailed list of technologies that will be used in the project is provided Low-fidelity user interface Low-fidelity wireframes clearly show the concepts of future functionalities Low-fidelity wireframes cover all user stories (user stories are labeled on the wireframe with their numbering) Navigation paths are clearly explained (using UI flow diagrams) Sprint planning Storymap clearly represents the project and includes all five sprints. Story map has to include all user stories (Must do, Should do, Could do and Won't do) with proper categorization and numbering. Project plan clearly shows the major milestones to be accomplished for all five sprints, including deadlines User stories are included in the project plan for Sprints 2 to 5 Estimated velocity is calculated for Sprints 2 to 5 Detailed Github Issues for Sprints 1 and 2 correspond with the storymap and project plan, have relevant states, milestones, labels and assignees Teamwork Meeting minutes exist for all meetings and include all required information Team is working well with the client (evidence would include the TA being CC'ed on client communications and meeting minutes) Team Canvas provides a clear overview of the team's profile Scrum roles are defined for the sprint (in their own section, separate of the team canvas) Belbin roles are defined for each team member Formatting All documents are consistently formatted and carefully proofread Wildcard The wildcard percentage will be assigned to one or multiple items in the rubric (entirely or split between many items) depending on the life-cycle and specifics of each project The wildcard is for thinking outside of the box and is not considered free marks","title":"Sprint 1"},{"location":"marking-sprint1/#team-project-marking-sprint-1","text":"For the first sprint, you will deliver: Project Requirements document An early version of the Software Design document (focusing on high-level architectural design) Project Management document Teamwork document Note Your documentation must be stored as markdown files in the /docs folder in the main branch of your GitHub repository. Use mkdocs and GitHub Pages to deploy the documentation. Example #1: https://ualberta-cmput401.github.io/example-documentation/ . Example #2: this site you are reading. Note that the examples are just examples and not gold standards for marking. You might also start implementation.","title":"Team Project Marking: Sprint 1"},{"location":"marking-sprint1/#late-release-submission-policy","text":"Applies to all sprints. If a sprint release is late for less than 24 hours: penalty of 5 marks. If late for more than 24 hours: penalty at the instuctor's discretion, min. 10 marks.","title":"Late release submission policy"},{"location":"marking-sprint1/#rubric","text":"Deliverable Marks Project overview 10 User stories 20 High-level software design 15 Low-fidelity user interface 15 Sprint planning 15 Teamwork 15 Formatting 5 Wildcard 5 Total 100","title":"Rubric"},{"location":"marking-sprint1/#project-overview","text":"Executive summary is clear, understandable, and concrete Glossary is clear and complete List of similar products is comprehensive, their functionalities are analyzed, with comments on how they may be used for code or inspiration Relevant open source projects are analyzed, with comments on how they may be used for code or inspiration List of useful technical resources is comprehensive","title":"Project overview"},{"location":"marking-sprint1/#user-stories","text":"Standard notation is used, numbering is consistent, user stories are categorized (e.g. grouped by feature) Complexity of each user story is estimated using story points The set of user stories is complete and relevant, it clearly demonstrates how exactly client requirements will be met Each user story is accompanied by viable acceptance tests User stories are prioritized using the MoSCoW method for the Minimum Viable Product (MVP) in a feasible way","title":"User stories"},{"location":"marking-sprint1/#high-level-software-design","text":"High-level system architecture is clearly defined Major data elements are clearly defined (using UML Class diagram, or ER diagram) Most important interaction scenarios are clearly defined (using UML Sequence diagrams) Detailed list of technologies that will be used in the project is provided","title":"High-level software design"},{"location":"marking-sprint1/#low-fidelity-user-interface","text":"Low-fidelity wireframes clearly show the concepts of future functionalities Low-fidelity wireframes cover all user stories (user stories are labeled on the wireframe with their numbering) Navigation paths are clearly explained (using UI flow diagrams)","title":"Low-fidelity user interface"},{"location":"marking-sprint1/#sprint-planning","text":"Storymap clearly represents the project and includes all five sprints. Story map has to include all user stories (Must do, Should do, Could do and Won't do) with proper categorization and numbering. Project plan clearly shows the major milestones to be accomplished for all five sprints, including deadlines User stories are included in the project plan for Sprints 2 to 5 Estimated velocity is calculated for Sprints 2 to 5 Detailed Github Issues for Sprints 1 and 2 correspond with the storymap and project plan, have relevant states, milestones, labels and assignees","title":"Sprint planning"},{"location":"marking-sprint1/#teamwork","text":"Meeting minutes exist for all meetings and include all required information Team is working well with the client (evidence would include the TA being CC'ed on client communications and meeting minutes) Team Canvas provides a clear overview of the team's profile Scrum roles are defined for the sprint (in their own section, separate of the team canvas) Belbin roles are defined for each team member","title":"Teamwork"},{"location":"marking-sprint1/#formatting","text":"All documents are consistently formatted and carefully proofread","title":"Formatting"},{"location":"marking-sprint1/#wildcard","text":"The wildcard percentage will be assigned to one or multiple items in the rubric (entirely or split between many items) depending on the life-cycle and specifics of each project The wildcard is for thinking outside of the box and is not considered free marks","title":"Wildcard"},{"location":"marking-sprint2/","text":"Team Project Marking: Sprint 2 In the second sprint, you will finalize your project documentation. At this stage, your system design should be complete. You will make your hands dirty with the code and make significant progress on your codebase and tests. At the end of this sprint, you will have the first working prototype. Late release submission policy Applies to all sprints. If a sprint release is late for less than 24 hours: penalty of 5 marks. If late for more than 24 hours: penalty at the instuctor's discretion, min. 10 marks. Rubric Deliverable Marks Revisions 10 Detailed design 20 Codebase 25 Testing 10 Sprint planning 10 Teamwork 15 Wildcard 10 Total 100 Revisions All comments from Sprint 1 have been sufficiently addressed Detailed design System architecture is clearly defined Data models are clearly defined (using UML Class diagram, or ER diagram) Interfaces (APIs, modules, etc.) are well defined and documented, i.e., how will interfaces interact with each other Design is complete, it fully represents the product, all planned functionalities can be explained/developed based on the design as documented Codebase Sufficient progress has been made (as planned in the previous sprint) GitHub repo is well organized, using the best practices One branch for each sprint with sub-branches for features (not for team members). Feature branches must be based on GitHub issues related to the feature. Never merging directly but rather creating pull requests with comments and having the commit's content reviewed by another team member. Branch protection rules must be set up on the sooner side. Pull requests from sprint branches to main (or master) must be reviewed by the scrum master before being merged at the end of the sprint. All releases must be based on the main branch. Issues must be maintained well with tags and closed whenever they're complete. Closed issues should be tagged in a Pull Request or commit. Code is well structured and organized Code is well written and efficient Comments consistent is useful Testing Tests exist and run for (as many as possible of) the demonstrated functionalities Tests should be Acceptance Tests for testing user stories from the user's point-of-view Tests should be labelled with what user story they're for Tests should be tracked in a \"Requirements Traceability Matrix\" Tests should include success and failure scenarios (e.g. test good password and bad password) Tests should ideally be user interface tests using UI test automation tools (e.g. selenium for web UIs) API should be tested if applicable Unit tests (tests per function, method, class in the code) are not required Sprint planning Storymap clearly represents the current state of the project Project plan is updated to reflect the current state of the project Velocity is re-estimated for Sprints 3, 4, and 5 Sprint 3 tasks are included in the project plan Detailed Github Issues for Sprint 3 correspond with the storymap and project plan, have relevant states, milestones, labels and assignees Teamwork Meeting minutes exist for all meetings and include all required information All team members attend meetings All team members have contributed to the sprint; each team member worked across multiple types of tasks (management, coding, testing, documentation, etc.) Team works well with the TA (asks questions/advice, reports progress meaningfully, addresses feedback, is kept in-the-loop about client) Team as a whole has made real progress since the last sprint - accomplished what they had planned to Scrum roles are defined for the sprint (in their own section, separate of the team canvas) Wildcard The wildcard percentage will be assigned to one or multiple items in the rubric (entirely or split between many items) depending on the life-cycle and specifics of each project The wildcard is for thinking outside of the box and is not considered free marks","title":"Sprint 2"},{"location":"marking-sprint2/#team-project-marking-sprint-2","text":"In the second sprint, you will finalize your project documentation. At this stage, your system design should be complete. You will make your hands dirty with the code and make significant progress on your codebase and tests. At the end of this sprint, you will have the first working prototype.","title":"Team Project Marking: Sprint 2"},{"location":"marking-sprint2/#late-release-submission-policy","text":"Applies to all sprints. If a sprint release is late for less than 24 hours: penalty of 5 marks. If late for more than 24 hours: penalty at the instuctor's discretion, min. 10 marks.","title":"Late release submission policy"},{"location":"marking-sprint2/#rubric","text":"Deliverable Marks Revisions 10 Detailed design 20 Codebase 25 Testing 10 Sprint planning 10 Teamwork 15 Wildcard 10 Total 100","title":"Rubric"},{"location":"marking-sprint2/#revisions","text":"All comments from Sprint 1 have been sufficiently addressed","title":"Revisions"},{"location":"marking-sprint2/#detailed-design","text":"System architecture is clearly defined Data models are clearly defined (using UML Class diagram, or ER diagram) Interfaces (APIs, modules, etc.) are well defined and documented, i.e., how will interfaces interact with each other Design is complete, it fully represents the product, all planned functionalities can be explained/developed based on the design as documented","title":"Detailed design"},{"location":"marking-sprint2/#codebase","text":"Sufficient progress has been made (as planned in the previous sprint) GitHub repo is well organized, using the best practices One branch for each sprint with sub-branches for features (not for team members). Feature branches must be based on GitHub issues related to the feature. Never merging directly but rather creating pull requests with comments and having the commit's content reviewed by another team member. Branch protection rules must be set up on the sooner side. Pull requests from sprint branches to main (or master) must be reviewed by the scrum master before being merged at the end of the sprint. All releases must be based on the main branch. Issues must be maintained well with tags and closed whenever they're complete. Closed issues should be tagged in a Pull Request or commit. Code is well structured and organized Code is well written and efficient Comments consistent is useful","title":"Codebase"},{"location":"marking-sprint2/#testing","text":"Tests exist and run for (as many as possible of) the demonstrated functionalities Tests should be Acceptance Tests for testing user stories from the user's point-of-view Tests should be labelled with what user story they're for Tests should be tracked in a \"Requirements Traceability Matrix\" Tests should include success and failure scenarios (e.g. test good password and bad password) Tests should ideally be user interface tests using UI test automation tools (e.g. selenium for web UIs) API should be tested if applicable Unit tests (tests per function, method, class in the code) are not required","title":"Testing"},{"location":"marking-sprint2/#sprint-planning","text":"Storymap clearly represents the current state of the project Project plan is updated to reflect the current state of the project Velocity is re-estimated for Sprints 3, 4, and 5 Sprint 3 tasks are included in the project plan Detailed Github Issues for Sprint 3 correspond with the storymap and project plan, have relevant states, milestones, labels and assignees","title":"Sprint planning"},{"location":"marking-sprint2/#teamwork","text":"Meeting minutes exist for all meetings and include all required information All team members attend meetings All team members have contributed to the sprint; each team member worked across multiple types of tasks (management, coding, testing, documentation, etc.) Team works well with the TA (asks questions/advice, reports progress meaningfully, addresses feedback, is kept in-the-loop about client) Team as a whole has made real progress since the last sprint - accomplished what they had planned to Scrum roles are defined for the sprint (in their own section, separate of the team canvas)","title":"Teamwork"},{"location":"marking-sprint2/#wildcard","text":"The wildcard percentage will be assigned to one or multiple items in the rubric (entirely or split between many items) depending on the life-cycle and specifics of each project The wildcard is for thinking outside of the box and is not considered free marks","title":"Wildcard"},{"location":"marking-sprint3/","text":"Team Project Marking: Sprint 3 In this sprint, you will continue working on the codebase and tests. You will also focus on UI and UX design. During the last week of this sprint, you will demo your prototype to your classmates (science fair style). Late release submission policy Applies to all sprints. If a sprint release is late for less than 24 hours: penalty of 5 marks. If late for more than 24 hours: penalty at the instuctor's discretion, min. 10 marks. Rubric Deliverable Marks Revisions 10 UX, UI design 20 Codebase 25 Testing 10 Sprint planning 10 Teamwork 15 Wildcard 10 Total 100 Revisions , Codebase , Teamwork , and Wildcard deliverables are similar to the ones in the previous sprint. UX, UI design Product user interface is consistent UX (user experience) is well thought-out and designed for the target audience UI design principles and usability heuristics are applied and described in the docs (e.g. https://www.nngroup.com/articles/ten-usability-heuristics/ ) Accessibility is considered and described in the docs (e.g. colors pass contrast check, see https://www.alarmsystem.no/color-contrast/ ) Testing Tests exist and run for (as many as possible of) the demonstrated functionalities Tests should be Acceptance Tests for testing user stories from the user's point-of-view Tests should be labelled with what user story they're for Tests should be tracked in a \"Requirements Traceability Matrix\" Tests should include success and failure scenarios (e.g. test good password and bad password) Tests should ideally be user interface tests using UI test automation tools (e.g. selenium for web UIs) API should be tested if applicable Unit tests (tests per function, method, class in the code) are not required At least one self-hosted Runner for Github Actions is setup Sprint planning Storymap clearly represents the current state of the project Project plan is updated to reflect the current state of the project Velocity is re-estimated for Sprints 4 and 5 Sprint 4 tasks are included in the project plan (in their own section, separate of the team canvas) Detailed Github Issues for Sprint 4 correspond with the storymap and project plan, have relevant states, milestones, labels and assignees","title":"Sprint 3"},{"location":"marking-sprint3/#team-project-marking-sprint-3","text":"In this sprint, you will continue working on the codebase and tests. You will also focus on UI and UX design. During the last week of this sprint, you will demo your prototype to your classmates (science fair style).","title":"Team Project Marking: Sprint 3"},{"location":"marking-sprint3/#late-release-submission-policy","text":"Applies to all sprints. If a sprint release is late for less than 24 hours: penalty of 5 marks. If late for more than 24 hours: penalty at the instuctor's discretion, min. 10 marks.","title":"Late release submission policy"},{"location":"marking-sprint3/#rubric","text":"Deliverable Marks Revisions 10 UX, UI design 20 Codebase 25 Testing 10 Sprint planning 10 Teamwork 15 Wildcard 10 Total 100 Revisions , Codebase , Teamwork , and Wildcard deliverables are similar to the ones in the previous sprint.","title":"Rubric"},{"location":"marking-sprint3/#ux-ui-design","text":"Product user interface is consistent UX (user experience) is well thought-out and designed for the target audience UI design principles and usability heuristics are applied and described in the docs (e.g. https://www.nngroup.com/articles/ten-usability-heuristics/ ) Accessibility is considered and described in the docs (e.g. colors pass contrast check, see https://www.alarmsystem.no/color-contrast/ )","title":"UX, UI design"},{"location":"marking-sprint3/#testing","text":"Tests exist and run for (as many as possible of) the demonstrated functionalities Tests should be Acceptance Tests for testing user stories from the user's point-of-view Tests should be labelled with what user story they're for Tests should be tracked in a \"Requirements Traceability Matrix\" Tests should include success and failure scenarios (e.g. test good password and bad password) Tests should ideally be user interface tests using UI test automation tools (e.g. selenium for web UIs) API should be tested if applicable Unit tests (tests per function, method, class in the code) are not required At least one self-hosted Runner for Github Actions is setup","title":"Testing"},{"location":"marking-sprint3/#sprint-planning","text":"Storymap clearly represents the current state of the project Project plan is updated to reflect the current state of the project Velocity is re-estimated for Sprints 4 and 5 Sprint 4 tasks are included in the project plan (in their own section, separate of the team canvas) Detailed Github Issues for Sprint 4 correspond with the storymap and project plan, have relevant states, milestones, labels and assignees","title":"Sprint planning"},{"location":"marking-sprint4/","text":"Team Project Marking: Sprint 4 In this sprint, you will deliver ~85% of the requirements. The prototype should be functional and usable but may have a few rough edges. Late release submission policy Applies to all sprints. If a sprint release is late for less than 24 hours: penalty of 5 marks. If late for more than 24 hours: penalty at the instuctor's discretion, min. 10 marks. Rubric Deliverable Marks Revisions 10 UX, UI design 10 Codebase 30 Testing 15 Sprint planning 10 Teamwork 15 Wildcard 10 Total 100 Revisions , UX, UI design , Codebase , Testing , Teamwork , and Wildcard deliverables are similar to the ones in the previous sprint. Sprint planning Storymap clearly represents the current state of the project Project plan is updated to reflect the current state of the project Velocity is re-estimated for Sprint 5 Sprint 5 tasks are included in the project plan Detailed Github Issues for Sprint 5 correspond with the storymap and project plan, have relevant states, milestones, labels and assignees","title":"Sprint 4"},{"location":"marking-sprint4/#team-project-marking-sprint-4","text":"In this sprint, you will deliver ~85% of the requirements. The prototype should be functional and usable but may have a few rough edges.","title":"Team Project Marking: Sprint 4"},{"location":"marking-sprint4/#late-release-submission-policy","text":"Applies to all sprints. If a sprint release is late for less than 24 hours: penalty of 5 marks. If late for more than 24 hours: penalty at the instuctor's discretion, min. 10 marks.","title":"Late release submission policy"},{"location":"marking-sprint4/#rubric","text":"Deliverable Marks Revisions 10 UX, UI design 10 Codebase 30 Testing 15 Sprint planning 10 Teamwork 15 Wildcard 10 Total 100 Revisions , UX, UI design , Codebase , Testing , Teamwork , and Wildcard deliverables are similar to the ones in the previous sprint.","title":"Rubric"},{"location":"marking-sprint4/#sprint-planning","text":"Storymap clearly represents the current state of the project Project plan is updated to reflect the current state of the project Velocity is re-estimated for Sprint 5 Sprint 5 tasks are included in the project plan Detailed Github Issues for Sprint 5 correspond with the storymap and project plan, have relevant states, milestones, labels and assignees","title":"Sprint planning"},{"location":"marking-sprint5/","text":"Team Project Marking: Sprint 5 During Sprint 5, you will be polishing the existing functionalities and working on user documentation. After this sprint, all requirements of the MVP must be complete. This system must be usable; it must deliver all \u201cmust-have\u201d functionalities, and, ideally, it should also deliver some \u201cnice-to-have\u201d features. Additionally, you will deliver the \"Final Documentation\" package including: Deployment instructions The deployment instructions should make it possible for your client to install and run your system on their own servers. A User manual The form and format of the user manual should satisfy the needs of the client and user community. Generally, it should be organized by user tasks described step-by-step (not by screen elements, for example). Remember, that you are developing the user manual for the end users of your system, so think about their socio-cultural profile and level of experience. A Job description (in case your client wants to hire a developer to support the system you created) After this project is over, your client might need to get someone on board to: Install and configure your system; Maintain and update your system, fix accidental bugs; Develop new features. As a part of the final documentation, you should provide a ready to publish job description. Include all the necessary skills that someone would need to work on your project. Late release submission policy Applies to all sprints. If a sprint release is late for less than 24 hours: penalty of 5 marks. If late for more than 24 hours: penalty at the instuctor's discretion, min. 10 marks. Rubric Deliverable Marks Revisions 5 Deployment environment and documentation 20 Codebase 30 Testing 20 Teamwork 10 CMPUT 401 Portal 5 Wildcard 10 Total 100 Revisions , Teamwork , and Wildcard deliverables are similar to the ones in the previous sprints. Deployment environment and documentation Deployment documentation is clear and complete; it fully covers backend and frontend List of required libraries with installation details is included Final prototype is deployed and functional Security defaults have been changed, debug and testing credentials are removed End-user documentation is available as a manual and as contextual help API is comprehensively documented Job description provides all the necessary information for the client if they need to hire a developer to maintain the system Codebase All \"Must\" and some Nice-to-have functionalities have been developed Github repo is well organized, using the best practices Code is well structured and organized Code is well written and efficient In-line code documentation (comments) is consistent is useful\" Testing All functionalities are sufficiently tested; tests cover whatever is important for the project (back-end logic, user interface, ...) and documented There is a \"Requirements Traceability Matrix\" tracking the testing of all functionalities At least one static code analysis testing tool (example: SonarQube) has been tried and its reports have been analyzed with an explanation of what the tool does and what has been analyzed in your code Manual acceptance tests (if applicable, i.e., functionality cannot be tested automatically) cover the implemented requirements CI/CD covers some of the functionalities CMPUT 401 Portal Project name Tagline Summary Source code link (if your client agreed to make the repository public) Logo (confirm with the client that it\u2019s okay to use their logo!) One selected screenshot Relevant tags","title":"Sprint 5"},{"location":"marking-sprint5/#team-project-marking-sprint-5","text":"During Sprint 5, you will be polishing the existing functionalities and working on user documentation. After this sprint, all requirements of the MVP must be complete. This system must be usable; it must deliver all \u201cmust-have\u201d functionalities, and, ideally, it should also deliver some \u201cnice-to-have\u201d features. Additionally, you will deliver the \"Final Documentation\" package including: Deployment instructions The deployment instructions should make it possible for your client to install and run your system on their own servers. A User manual The form and format of the user manual should satisfy the needs of the client and user community. Generally, it should be organized by user tasks described step-by-step (not by screen elements, for example). Remember, that you are developing the user manual for the end users of your system, so think about their socio-cultural profile and level of experience. A Job description (in case your client wants to hire a developer to support the system you created) After this project is over, your client might need to get someone on board to: Install and configure your system; Maintain and update your system, fix accidental bugs; Develop new features. As a part of the final documentation, you should provide a ready to publish job description. Include all the necessary skills that someone would need to work on your project.","title":"Team Project Marking: Sprint 5"},{"location":"marking-sprint5/#late-release-submission-policy","text":"Applies to all sprints. If a sprint release is late for less than 24 hours: penalty of 5 marks. If late for more than 24 hours: penalty at the instuctor's discretion, min. 10 marks.","title":"Late release submission policy"},{"location":"marking-sprint5/#rubric","text":"Deliverable Marks Revisions 5 Deployment environment and documentation 20 Codebase 30 Testing 20 Teamwork 10 CMPUT 401 Portal 5 Wildcard 10 Total 100 Revisions , Teamwork , and Wildcard deliverables are similar to the ones in the previous sprints.","title":"Rubric"},{"location":"marking-sprint5/#deployment-environment-and-documentation","text":"Deployment documentation is clear and complete; it fully covers backend and frontend List of required libraries with installation details is included Final prototype is deployed and functional Security defaults have been changed, debug and testing credentials are removed End-user documentation is available as a manual and as contextual help API is comprehensively documented Job description provides all the necessary information for the client if they need to hire a developer to maintain the system","title":"Deployment environment and documentation"},{"location":"marking-sprint5/#codebase","text":"All \"Must\" and some Nice-to-have functionalities have been developed Github repo is well organized, using the best practices Code is well structured and organized Code is well written and efficient In-line code documentation (comments) is consistent is useful\"","title":"Codebase"},{"location":"marking-sprint5/#testing","text":"All functionalities are sufficiently tested; tests cover whatever is important for the project (back-end logic, user interface, ...) and documented There is a \"Requirements Traceability Matrix\" tracking the testing of all functionalities At least one static code analysis testing tool (example: SonarQube) has been tried and its reports have been analyzed with an explanation of what the tool does and what has been analyzed in your code Manual acceptance tests (if applicable, i.e., functionality cannot be tested automatically) cover the implemented requirements CI/CD covers some of the functionalities","title":"Testing"},{"location":"marking-sprint5/#cmput-401-portal","text":"Project name Tagline Summary Source code link (if your client agreed to make the repository public) Logo (confirm with the client that it\u2019s okay to use their logo!) One selected screenshot Relevant tags","title":"CMPUT 401 Portal"},{"location":"meeting-minutes-example/","text":"Note Meeting minutes should be stored in a single markdown file in the /docs folder labeled as meeting-minutes.md . Meeting Minutes Example \ud83d\udcc6 Oct 3, 2022, 9:00 am \ud83d\udccd CSC B-10 Agenda \ud83d\udccb Sprint 2 Deliverables Feedback from Sprint 1 Frontend: add a shared css file in lib folder Attendees \ud83d\udc69\u200d\ud83d\udcbb \ud83e\uddd1\u200d\ud83d\udcbb Yan Li Priya Patel Jacob Johnson Jessica Smith Marie Dupont Carlos Rodriguez Matthew Brown (TA) Rajesh Kumar (Client) Minutes \ud83d\udd51 Feedback from Sprint 1: User stories: US 3.03: add description for \u2018Import Different Kinds of CSV File\u2019 US 3.02: add description for \u2018Import Google Sheets Data\u2019. Move plotly dash and mongodb to Technical Resources in Project Requirement Doc Add user story number in Story map - Project Management Doc Add tabs for meeting minutes doc (by dates), don\u2019t make the page so long Add tabs for user stories - Project Requirement Doc Need a team name Bugs: Bug: MKdocs not working! Showing 404: Bug: Login window doesn\u2019t pop up in google chrome, but works in firefox. UI: Use libraries in svelte to build nav bar, so we can save some time to implement other functionalities: bulma Action Items \ud83e\uddfe Member Tasks Yan Implement tabs in mkdocs to reduce page length, bulma Priya Fixed bug in login page, logout Jacob Student data endpoint(s), Finish auth endpoint Jessica Fix documentation -> done, Figure out the DNS error with the GitHub authentication Marie Github analytics api to backend Carlos Build page for student, Look into plotly dash","title":"Meeting minutes example"},{"location":"meeting-minutes-example/#meeting-minutes-example","text":"\ud83d\udcc6 Oct 3, 2022, 9:00 am \ud83d\udccd CSC B-10","title":"Meeting Minutes Example"},{"location":"meeting-minutes-example/#agenda","text":"Sprint 2 Deliverables Feedback from Sprint 1 Frontend: add a shared css file in lib folder","title":"Agenda \ud83d\udccb"},{"location":"meeting-minutes-example/#attendees","text":"Yan Li Priya Patel Jacob Johnson Jessica Smith Marie Dupont Carlos Rodriguez Matthew Brown (TA) Rajesh Kumar (Client)","title":"Attendees \ud83d\udc69\u200d\ud83d\udcbb \ud83e\uddd1\u200d\ud83d\udcbb"},{"location":"meeting-minutes-example/#minutes","text":"","title":"Minutes \ud83d\udd51"},{"location":"meeting-minutes-example/#feedback-from-sprint-1","text":"User stories: US 3.03: add description for \u2018Import Different Kinds of CSV File\u2019 US 3.02: add description for \u2018Import Google Sheets Data\u2019. Move plotly dash and mongodb to Technical Resources in Project Requirement Doc Add user story number in Story map - Project Management Doc Add tabs for meeting minutes doc (by dates), don\u2019t make the page so long Add tabs for user stories - Project Requirement Doc Need a team name","title":"Feedback from Sprint 1:"},{"location":"meeting-minutes-example/#bugs","text":"Bug: MKdocs not working! Showing 404: Bug: Login window doesn\u2019t pop up in google chrome, but works in firefox.","title":"Bugs:"},{"location":"meeting-minutes-example/#ui","text":"Use libraries in svelte to build nav bar, so we can save some time to implement other functionalities: bulma","title":"UI:"},{"location":"meeting-minutes-example/#action-items","text":"Member Tasks Yan Implement tabs in mkdocs to reduce page length, bulma Priya Fixed bug in login page, logout Jacob Student data endpoint(s), Finish auth endpoint Jessica Fix documentation -> done, Figure out the DNS error with the GitHub authentication Marie Github analytics api to backend Carlos Build page for student, Look into plotly dash","title":"Action Items \ud83e\uddfe"},{"location":"project-expectations/","text":"Project Expectations Project Storage Please use the repository provided by the teaching team. All repos should be owned by UAlberta-CMPUT401, so if you need additional repos, please ask your TA to create any additional repos you need and add you to them. This so if a student drops, deletes their github, or we need to revist something after the end of the semester. (Instructors are required to keep assignments & exams for 1 year in case of grade appeals or cheating, etc.). Third Party Applications and Github Integrations Third party applications and Github integrations such as Jira are generally not allowed in this course. All marking will be done on work in your Github repository, not on any third party tool usage. REMEMBER: A big part of this course is focusing on MVP. That means not spending too much time on tooling. If there is a strong case for a third party application or Github integration, send an e-mail to the teaching team. Github Actions Github gives us 3000 action minutes per month with Github Education, but they're all pooled and so because some teams use more than others we will eventually run out. To ensure you can still run your actions, please set up a Runner on Cybera. There are some instructions here: https://youtu.be/SASoUr9X0QA Sprint Releases To indicate which commit you would like to be evaluated, create a GitHub release by the sprint deadline. The release should not be a pre-release or draft release. More information can be found here: https://docs.github.com/en/repositories/releasing-projects-on-github/about-releases Meeting Minutes Meeting minutes are meant to keep track of what has been discussed during a meeting. It can serve as a reference to resolve problems that can arise as the project progresses. Meeting minutes will record the: date and time, location, attendees, agenda of what is to be discussed, minutes of what was discussed, and action items arising from the meeting. You should be meeting with your team every week at the beginning of the week. You should be meeting with your TA every week during the assigned lab. You should be meeting with your client every week (minimum: once per sprint). Meeting minutes should be immediately submitted after each meeting via a Google Forms link on eClass. 401 IP Agreement Form Please make sure everyone on the team & the client sign the IP agreement form. It's listed on the eClass. The purpose & rationale of the form is: Clients want to be able to own the code after the end of the project to do as they please, for example: keep working with the code. The idea for the project belongs to the client and the code comes from the team's work. The client can use the code for their idea. The team can use the code for any other ideas that they may have It is required because the project ideas are creative and related to the client's business/project. If you have any further concerns, please email the instructor. Project Documentation You will be working on these documents during Sprint 1. In Sprint 2, you will refine and finalize the project documentation. After Sprint 2, you will update the Project Management page. All other documents will be considered final after the end Sprint 2. Example: https://ualberta-cmput401.github.io/example-documentation/ . The example serves as reference only and should not be considered a gold standard. Project requirements The purpose of this document is to explain the requirements of your software product. It should have the following sections. Executive summary Write a short overview of the project (one paragraph), including the following: The problem that the product will solve (use your client\u2019s language); Value proposition (what will be the essential functionality or your product); Who will use your product; How your product will be used. Project glossary Define any special terminology in the application domain (i.e., the terms that your client is using; not development, programming, or implementation terms). User stories User stories should be formulated using the standard notation (\u201cAs a [persona], I [want to], [so that].\u201d). Think carefully about who will be the users of your product, and formulate user stories for specific personae. Your collection of user stories should be complete and cohesive, it must clearly show how exactly the client\u2019s requirements will be met with your product. For each user story, you must formulate detailed acceptance tests. User stories must be prioritized using the MoSCoW method. Similar products List competitive or similar products that you may use as a reference and/or inspiration. At a minimum, similar products that can be found trivially via Google should be included. Open-source products List any open-source products that might somehow benefit your product, e.g.: As a reference or inspiration; As an external interface that you might want to use; As a source of information and insights. Be creative and think outside the box. Technical resources List useful informational resources around the tools and frameworks that you plan to use. Software design The software design document should be consistent with the requirements document, it should document and explain how the design will actually deliver the required features. There is no one \"right\" way to create this document. Use your best judgement to choose the notations and tools. In any case, make sure that this document is meaningful with respect to your system. Be selective in what you portray about the architecture -- don\u2019t go into too much detail but don\u2019t make it overly superficial either. Suppose a new developer comes to the project: describe what is not obvious and definitely important to know. As for practical guidelines, each diagram should be described and motivated; you should use a consistent naming convention, and key elements should be annotated with further comments to explain their roles. Before getting started, refresh your understanding of UML, this book is recommended (chapters 1, 3, 4): https://learning.oreilly.com/library/view/uml-distilled-a/0321193687/ . High-level architecture Most likely, you will not use any UML notation for the architecture diagram. You are free to invent your own style of architecture diagram. Include a useful legend. Refer to the examples discussed in class for guidance. What\u2019s the right scope of the architecture diagram? \u201cOne that\u2019s big enough to be meaningful, small enough to be comprehensible, and cohesive enough to make sense.\u201d Study this chapter to feel the gist of creating good software architecture diagrams: Make sure that your diagram includes all layers. You can have more than one diagram if your project\u2019s complexity requires it. Detailed list of technologies List the possible tech stack you will be using. Include links and descriptions of any libraries, frameworks, and tools you will be using. Major data elements If you adopt an object-oriented style for your system, you can present the data as a UML Class diagram. If your system is not naturally object-oriented, you can create an Entity Relationship diagram (ERD). Interaction scenarios To document the dynamic behaviour of the system, for each interesting feature, you should develop a UML Sequence diagram, with components as \u201cobjects\u201d and calls between them. Think, which features of your system should be described as sequence diagrams. Low-fidelity user interface Finally, you should develop low-fidelity sketches/wireframes of a few key screens. At this stage, it\u2019s important to show the overall look and feel of your app, as well as the high-level user-interaction design. Low-fidelity wireframes are usually black and white. Looking at the wireframes, anyone should be able to get an idea of what will be developed. Test your wireframes with your client, encourage them to give feedback. Project management There are two sections in this document: Storymap Should include all user stories Project plan (or backlog) You should start the document with a storymap. Include all five sprints. Don't forget to indicate estimation of each user story (in story points). The second section should define a project plan. Sprint 1 For Sprint 1 , you should include the following: Due date Tasks to be completed (include asignees and due dates) Most Sprint 1 tasks will not be related to any user story. For example, you will be creating the project documentation, setting up the project repository, setting up the project management tools, etc. Sprint 2 For Sprint 2 , you should include: Due date List of user stories to be completed (include estimation of each user story in story points) Estimated sprint velocity Tasks to be completed (include asignees and due dates) The tasks should correspond with the user stories. Sprints 3, 4, and 5 For the remaining sprints, you should include: Due date List of user stories to be completed (include estimation of each user story in story points) Estimated sprint velocity Do not list the tasks yet. You will be planning them later, before the start of each sprint. GitHub Issues Based on the planned tasks , set up and keep current Github Issues. Close issues by tagging them in a Pull Request or commit (see https://docs.github.com/en/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue ). Teamwork This document includes three sections: Team canvas Scrum roles Belbin team roles Team canvas The Team canvas should be based on the template found here http://theteamcanvas.com/use /. You must choose the Full version of the canvas. Use the instructions to facilitate the Team canvas session. An in-person session is recommended. However, if you choose an online format, you may use Mural or any other whiteboard tool. While creating your Team canvas, think about the high-level roles of each team member (e.g.: Scrum Master, Product Owner, Frontend Developer, Backend Developer, QA Engineer, DevOps Engineer, UI/UX Designer, Floater etc.). Think about which roles are necessary for your project. Each team member may be assigned to multiple roles, and each role may include multiple team members. Scrum roles There are two special Scrum roles that must be defined for each sprint: Scrum Master Product Owner You may choose to elect a Scrum Master and Product Owner for the whole project or switch roles for each sprint so that more team members can get product management experience. A good overview of skills and responsibilities of a Scrum Master and a Product Owner: https://productmanagerhq.com/scrum-master-vs-product-owner/ . Please define these roles in a section independent of the team canvas. Belbin team roles For each of the team member, list their preferred , manageable and least preferred roles. Then, list all nine Belbin roles and, for each role, provide a brief description and a list of people who are able to fulfill that role.","title":"Project Expectations"},{"location":"project-expectations/#project-expectations","text":"","title":"Project Expectations"},{"location":"project-expectations/#project-storage","text":"Please use the repository provided by the teaching team. All repos should be owned by UAlberta-CMPUT401, so if you need additional repos, please ask your TA to create any additional repos you need and add you to them. This so if a student drops, deletes their github, or we need to revist something after the end of the semester. (Instructors are required to keep assignments & exams for 1 year in case of grade appeals or cheating, etc.).","title":"Project Storage"},{"location":"project-expectations/#third-party-applications-and-github-integrations","text":"Third party applications and Github integrations such as Jira are generally not allowed in this course. All marking will be done on work in your Github repository, not on any third party tool usage. REMEMBER: A big part of this course is focusing on MVP. That means not spending too much time on tooling. If there is a strong case for a third party application or Github integration, send an e-mail to the teaching team.","title":"Third Party Applications and Github Integrations"},{"location":"project-expectations/#github-actions","text":"Github gives us 3000 action minutes per month with Github Education, but they're all pooled and so because some teams use more than others we will eventually run out. To ensure you can still run your actions, please set up a Runner on Cybera. There are some instructions here: https://youtu.be/SASoUr9X0QA","title":"Github Actions"},{"location":"project-expectations/#sprint-releases","text":"To indicate which commit you would like to be evaluated, create a GitHub release by the sprint deadline. The release should not be a pre-release or draft release. More information can be found here: https://docs.github.com/en/repositories/releasing-projects-on-github/about-releases","title":"Sprint Releases"},{"location":"project-expectations/#meeting-minutes","text":"Meeting minutes are meant to keep track of what has been discussed during a meeting. It can serve as a reference to resolve problems that can arise as the project progresses. Meeting minutes will record the: date and time, location, attendees, agenda of what is to be discussed, minutes of what was discussed, and action items arising from the meeting. You should be meeting with your team every week at the beginning of the week. You should be meeting with your TA every week during the assigned lab. You should be meeting with your client every week (minimum: once per sprint). Meeting minutes should be immediately submitted after each meeting via a Google Forms link on eClass.","title":"Meeting Minutes"},{"location":"project-expectations/#401-ip-agreement-form","text":"Please make sure everyone on the team & the client sign the IP agreement form. It's listed on the eClass. The purpose & rationale of the form is: Clients want to be able to own the code after the end of the project to do as they please, for example: keep working with the code. The idea for the project belongs to the client and the code comes from the team's work. The client can use the code for their idea. The team can use the code for any other ideas that they may have It is required because the project ideas are creative and related to the client's business/project. If you have any further concerns, please email the instructor.","title":"401 IP Agreement Form"},{"location":"project-expectations/#project-documentation","text":"You will be working on these documents during Sprint 1. In Sprint 2, you will refine and finalize the project documentation. After Sprint 2, you will update the Project Management page. All other documents will be considered final after the end Sprint 2. Example: https://ualberta-cmput401.github.io/example-documentation/ . The example serves as reference only and should not be considered a gold standard.","title":"Project Documentation"},{"location":"project-expectations/#project-requirements","text":"The purpose of this document is to explain the requirements of your software product. It should have the following sections.","title":"Project requirements"},{"location":"project-expectations/#executive-summary","text":"Write a short overview of the project (one paragraph), including the following: The problem that the product will solve (use your client\u2019s language); Value proposition (what will be the essential functionality or your product); Who will use your product; How your product will be used.","title":"Executive summary"},{"location":"project-expectations/#project-glossary","text":"Define any special terminology in the application domain (i.e., the terms that your client is using; not development, programming, or implementation terms).","title":"Project glossary"},{"location":"project-expectations/#user-stories","text":"User stories should be formulated using the standard notation (\u201cAs a [persona], I [want to], [so that].\u201d). Think carefully about who will be the users of your product, and formulate user stories for specific personae. Your collection of user stories should be complete and cohesive, it must clearly show how exactly the client\u2019s requirements will be met with your product. For each user story, you must formulate detailed acceptance tests. User stories must be prioritized using the MoSCoW method.","title":"User stories"},{"location":"project-expectations/#similar-products","text":"List competitive or similar products that you may use as a reference and/or inspiration. At a minimum, similar products that can be found trivially via Google should be included.","title":"Similar products"},{"location":"project-expectations/#open-source-products","text":"List any open-source products that might somehow benefit your product, e.g.: As a reference or inspiration; As an external interface that you might want to use; As a source of information and insights. Be creative and think outside the box.","title":"Open-source products"},{"location":"project-expectations/#technical-resources","text":"List useful informational resources around the tools and frameworks that you plan to use.","title":"Technical resources"},{"location":"project-expectations/#software-design","text":"The software design document should be consistent with the requirements document, it should document and explain how the design will actually deliver the required features. There is no one \"right\" way to create this document. Use your best judgement to choose the notations and tools. In any case, make sure that this document is meaningful with respect to your system. Be selective in what you portray about the architecture -- don\u2019t go into too much detail but don\u2019t make it overly superficial either. Suppose a new developer comes to the project: describe what is not obvious and definitely important to know. As for practical guidelines, each diagram should be described and motivated; you should use a consistent naming convention, and key elements should be annotated with further comments to explain their roles. Before getting started, refresh your understanding of UML, this book is recommended (chapters 1, 3, 4): https://learning.oreilly.com/library/view/uml-distilled-a/0321193687/ .","title":"Software design"},{"location":"project-expectations/#high-level-architecture","text":"Most likely, you will not use any UML notation for the architecture diagram. You are free to invent your own style of architecture diagram. Include a useful legend. Refer to the examples discussed in class for guidance. What\u2019s the right scope of the architecture diagram? \u201cOne that\u2019s big enough to be meaningful, small enough to be comprehensible, and cohesive enough to make sense.\u201d Study this chapter to feel the gist of creating good software architecture diagrams: Make sure that your diagram includes all layers. You can have more than one diagram if your project\u2019s complexity requires it.","title":"High-level architecture"},{"location":"project-expectations/#detailed-list-of-technologies","text":"List the possible tech stack you will be using. Include links and descriptions of any libraries, frameworks, and tools you will be using.","title":"Detailed list of technologies"},{"location":"project-expectations/#major-data-elements","text":"If you adopt an object-oriented style for your system, you can present the data as a UML Class diagram. If your system is not naturally object-oriented, you can create an Entity Relationship diagram (ERD).","title":"Major data elements"},{"location":"project-expectations/#interaction-scenarios","text":"To document the dynamic behaviour of the system, for each interesting feature, you should develop a UML Sequence diagram, with components as \u201cobjects\u201d and calls between them. Think, which features of your system should be described as sequence diagrams.","title":"Interaction scenarios"},{"location":"project-expectations/#low-fidelity-user-interface","text":"Finally, you should develop low-fidelity sketches/wireframes of a few key screens. At this stage, it\u2019s important to show the overall look and feel of your app, as well as the high-level user-interaction design. Low-fidelity wireframes are usually black and white. Looking at the wireframes, anyone should be able to get an idea of what will be developed. Test your wireframes with your client, encourage them to give feedback.","title":"Low-fidelity user interface"},{"location":"project-expectations/#project-management","text":"There are two sections in this document: Storymap Should include all user stories Project plan (or backlog) You should start the document with a storymap. Include all five sprints. Don't forget to indicate estimation of each user story (in story points). The second section should define a project plan.","title":"Project management"},{"location":"project-expectations/#sprint-1","text":"For Sprint 1 , you should include the following: Due date Tasks to be completed (include asignees and due dates) Most Sprint 1 tasks will not be related to any user story. For example, you will be creating the project documentation, setting up the project repository, setting up the project management tools, etc.","title":"Sprint 1"},{"location":"project-expectations/#sprint-2","text":"For Sprint 2 , you should include: Due date List of user stories to be completed (include estimation of each user story in story points) Estimated sprint velocity Tasks to be completed (include asignees and due dates) The tasks should correspond with the user stories.","title":"Sprint 2"},{"location":"project-expectations/#sprints-3-4-and-5","text":"For the remaining sprints, you should include: Due date List of user stories to be completed (include estimation of each user story in story points) Estimated sprint velocity Do not list the tasks yet. You will be planning them later, before the start of each sprint.","title":"Sprints 3, 4, and 5"},{"location":"project-expectations/#github-issues","text":"Based on the planned tasks , set up and keep current Github Issues. Close issues by tagging them in a Pull Request or commit (see https://docs.github.com/en/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue ).","title":"GitHub Issues"},{"location":"project-expectations/#teamwork","text":"This document includes three sections: Team canvas Scrum roles Belbin team roles","title":"Teamwork"},{"location":"project-expectations/#team-canvas","text":"The Team canvas should be based on the template found here http://theteamcanvas.com/use /. You must choose the Full version of the canvas. Use the instructions to facilitate the Team canvas session. An in-person session is recommended. However, if you choose an online format, you may use Mural or any other whiteboard tool. While creating your Team canvas, think about the high-level roles of each team member (e.g.: Scrum Master, Product Owner, Frontend Developer, Backend Developer, QA Engineer, DevOps Engineer, UI/UX Designer, Floater etc.). Think about which roles are necessary for your project. Each team member may be assigned to multiple roles, and each role may include multiple team members.","title":"Team canvas"},{"location":"project-expectations/#scrum-roles","text":"There are two special Scrum roles that must be defined for each sprint: Scrum Master Product Owner You may choose to elect a Scrum Master and Product Owner for the whole project or switch roles for each sprint so that more team members can get product management experience. A good overview of skills and responsibilities of a Scrum Master and a Product Owner: https://productmanagerhq.com/scrum-master-vs-product-owner/ . Please define these roles in a section independent of the team canvas.","title":"Scrum roles"},{"location":"project-expectations/#belbin-team-roles","text":"For each of the team member, list their preferred , manageable and least preferred roles. Then, list all nine Belbin roles and, for each role, provide a brief description and a list of people who are able to fulfill that role.","title":"Belbin team roles"},{"location":"resources/","text":"Resources You may need to be logged into your UAlberta account to access these. Required CMPUT 401 Bookshelf Multi-Use Release Form Intellectual Property Agreement Application domain: reuse some words from the client's domain. For example: if the project aims to develop an app for the student union to welcome new students on campus, the application domain would be \"student onboarding\". Readings Client Needs & Software Requirements Workshops & Tutorials Below are some workshops previously presented in prior terms, and possibly helpful tutorials. Cybera Rapid Access Cloud Tutorial Tutorial Screencast Django Workshop Recording Slides Repo & Step-by-Step Tutorial React Workshop Recording Repository Boilerplate Code Hackathon Success Strategies + Flutter UI Workshop Recording Slides Boilerplate Introduction to Docker Video Tutorial with Examples Continuous Integration/Delivery & GitHub Actions Github Session Github Workflow Django Tutorial for Beginners How to do Code Reviews like a Human Part 1 Part 2 Community Service-Learning Website Student Guidebook","title":"Resources"},{"location":"resources/#resources","text":"You may need to be logged into your UAlberta account to access these.","title":"Resources"},{"location":"resources/#required","text":"CMPUT 401 Bookshelf Multi-Use Release Form Intellectual Property Agreement Application domain: reuse some words from the client's domain. For example: if the project aims to develop an app for the student union to welcome new students on campus, the application domain would be \"student onboarding\".","title":"Required"},{"location":"resources/#readings","text":"Client Needs & Software Requirements","title":"Readings"},{"location":"resources/#workshops-tutorials","text":"Below are some workshops previously presented in prior terms, and possibly helpful tutorials. Cybera Rapid Access Cloud Tutorial Tutorial Screencast Django Workshop Recording Slides Repo & Step-by-Step Tutorial React Workshop Recording Repository Boilerplate Code Hackathon Success Strategies + Flutter UI Workshop Recording Slides Boilerplate Introduction to Docker Video Tutorial with Examples Continuous Integration/Delivery & GitHub Actions Github Session Github Workflow Django Tutorial for Beginners How to do Code Reviews like a Human Part 1 Part 2","title":"Workshops &amp; Tutorials"},{"location":"resources/#community-service-learning","text":"Website Student Guidebook","title":"Community Service-Learning"},{"location":"teaching-team/","text":"Teaching Team Instructors See Course Outline . Teaching Assistants Kalvin Eng Email : kalvin.eng@ualberta.ca Office hours : email for appointment Amir Salimi Email : asalimi@ualberta.ca Office hours : TBD Mashrura Tasnim Email : mashrura@ualberta.ca Office hours : TBD Mohayeminul Islam Email : mdmohaye@ualberta.ca Office hours : TBD YuJing Qu Email : qu8@ualberta.ca Office hours : TBD Aniket Mishra Email : mishra2@ualberta.ca Office hours : TBD","title":"Teaching Team"},{"location":"teaching-team/#teaching-team","text":"","title":"Teaching Team"},{"location":"teaching-team/#instructors","text":"See Course Outline .","title":"Instructors"},{"location":"teaching-team/#teaching-assistants","text":"","title":"Teaching Assistants"},{"location":"teaching-team/#kalvin-eng","text":"Email : kalvin.eng@ualberta.ca Office hours : email for appointment","title":"Kalvin Eng"},{"location":"teaching-team/#amir-salimi","text":"Email : asalimi@ualberta.ca Office hours : TBD","title":"Amir Salimi"},{"location":"teaching-team/#mashrura-tasnim","text":"Email : mashrura@ualberta.ca Office hours : TBD","title":"Mashrura Tasnim"},{"location":"teaching-team/#mohayeminul-islam","text":"Email : mdmohaye@ualberta.ca Office hours : TBD","title":"Mohayeminul Islam"},{"location":"teaching-team/#yujing-qu","text":"Email : qu8@ualberta.ca Office hours : TBD","title":"YuJing Qu"},{"location":"teaching-team/#aniket-mishra","text":"Email : mishra2@ualberta.ca Office hours : TBD","title":"Aniket Mishra"}]}